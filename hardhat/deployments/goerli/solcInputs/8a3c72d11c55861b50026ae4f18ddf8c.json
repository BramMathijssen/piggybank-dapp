{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ParentContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\nimport \"./TokenCreator.sol\";\r\n\r\nerror ParentContract__NotOwnerOfToken();\r\nerror ParentContract__ChildHasAlreadyBeenAddedByAParent();\r\nerror ParentContract__TokenNotOwnedByParent();\r\nerror ParentContract__ClaimedTokenIsNotEqualToPreferedToken();\r\nerror ParentContract__ClaimMomentIsNotValid();\r\n\r\n/// @title Crypto Piggybank.\r\n/// @author Bram Mathijssen.\r\n/// @notice A decentralized platform for parents to teach their children about cryptocurrencies.\r\ncontract ParentContract {\r\n    /* Type declarations */\r\n    /// @notice Enum to declare the available claim periods: daily, weekly, monthly.\r\n    enum ClaimPeriod {\r\n        DAILY,\r\n        WEEKLY,\r\n        MONTHLY\r\n    }\r\n\r\n    /* State Variables */\r\n    /// @notice Contract which inherts from the ERC20 contract, used to create new tokens.\r\n    TokenCreator private i_tokenCreator;\r\n\r\n    /* Mappings */\r\n    /// @notice Mapping of parent addresses to the tokens they have minted with the TokenCreator contract.\r\n    mapping(address => Token[]) public parentToTokensMapping;\r\n\r\n    /// @notice Nested mapping of a parent address mapped to a mapping of a child address to a child struct.\r\n    mapping(address => mapping(address => Child)) public parentToChildMappingNested;\r\n\r\n    /// @notice Mapping of a child address to a parent address.\r\n    /// @dev Used as a bidirectional datastructure together with parentToChildMapping.\r\n    mapping(address => address) public childToParentMapping;\r\n\r\n    /* Structs */\r\n    /** @notice A struct containing all the info related to a child.\r\n    @param name The child's name.\r\n    @param childAddress The child's address.\r\n    @param tokenPreference The token which the child prefers to receive as allowance.\r\n    @param baseAmount The base amount of allowance as given by the parent.\r\n    @param claimableAmount The claimable amount of allowance, calculated based on the claimPeriod and baseAmount.\r\n    @param claimValid Validity of the claim, based on the current time and nextClaimPeriod.\r\n    @param claimPeriod The selected claimPeriod on which the child would like to claim their allowance.\r\n    @param nextClaimPeriod The date on which the child will be eligible to claim their allowance.\r\n  */\r\n    struct Child {\r\n        string name;\r\n        address childAddress;\r\n        address tokenPreference;\r\n        uint256 baseAmount;\r\n        uint256 claimableAmount;\r\n        bool claimValid;\r\n        ClaimPeriod claimPeriod;\r\n        uint nextClaimPeriod;\r\n    }\r\n\r\n    ///@notice A struct containing all the info about the tokens created with the TokenCreator contract.\r\n    struct Token {\r\n        uint256 supply;\r\n        address tokenAddress;\r\n        string name;\r\n        string symbol;\r\n    }\r\n\r\n    /* Events */\r\n    event ChildAdded(address indexed parentAddress, address childAddress, Child child);\r\n    event TokenCreated(address indexed parentAddress, address tokenAddress, Token token);\r\n    event AllowanceClaimed(address indexed parentAddress, address indexed childAddress, Child child, address tokenAddress, uint timestamp);\r\n\r\n    /* Modifiers */\r\n    /** @dev This modifier checks if the msg.sender owns the given token.\r\n     * Complexity: O(N), the parent realistically only owns a couple of tokens which makes an O(N) complexity acceptable.\r\n     * @param _tokenAddress Address of the token which will be checked for ownership.\r\n     */\r\n    modifier hasMinted(address _tokenAddress) {\r\n        Token[] memory tokens = parentToTokensMapping[msg.sender];\r\n        bool tokenFound = false;\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            if (tokens[i].tokenAddress == _tokenAddress) {\r\n                tokenFound = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!tokenFound) {\r\n            revert ParentContract__NotOwnerOfToken();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /* Functions */\r\n    /** @dev Mints new tokens with the TokenCreator contract and stores them in current contract, maps the token to the msg.sender.\r\n     * @param _supply Total supply of the minted token.\r\n     * @param _contractName Name of the minted token.\r\n     * @param _contractSymbol Symbol of the minted token.\r\n     */\r\n    function createNewToken(uint256 _supply, string memory _contractName, string memory _contractSymbol) public {\r\n        address createdTokenAddress = address(new TokenCreator(_supply, _contractName, _contractSymbol));\r\n\r\n        Token memory token = Token({supply: _supply, tokenAddress: createdTokenAddress, name: _contractName, symbol: _contractSymbol});\r\n        parentToTokensMapping[msg.sender].push(Token({supply: _supply, tokenAddress: createdTokenAddress, name: _contractName, symbol: _contractSymbol}));\r\n        emit TokenCreated(msg.sender, createdTokenAddress, token);\r\n    }\r\n\r\n    /** @notice Parent function: Function for parent to add a new child.\r\n     * @dev Child is added to parentToChildMapping and the parent is added to the childToParentMapping as bidirectional relationship.\r\n     * @param _name Name of the child.\r\n     * @param _childAddress Child's address.\r\n     * @param _tokenPreference Address of the child's prefered token.\r\n     * @param _baseAmount Base amount of allowance (claimableAmount will be determined based on this).\r\n     */\r\n    function addChild(string memory _name, address _childAddress, address _tokenPreference, uint256 _baseAmount) public hasMinted(_tokenPreference) {\r\n        if (childToParentMapping[_childAddress] != address(0)) {\r\n            revert ParentContract__ChildHasAlreadyBeenAddedByAParent();\r\n        }\r\n        if (parentToChildMappingNested[msg.sender][_childAddress].childAddress != address(0)) {\r\n            revert ParentContract__ChildHasAlreadyBeenAddedByAParent();\r\n        }\r\n\r\n        uint _nextClaimPeriod = getCurrentTime() + 1 weeks;\r\n        uint256 _claimAbleAmount = calculateClaimableAmount(_baseAmount, ClaimPeriod.WEEKLY);\r\n        Child memory child = Child({name: _name, childAddress: _childAddress, tokenPreference: _tokenPreference, baseAmount: _baseAmount, claimableAmount: _claimAbleAmount, claimValid: false, claimPeriod: ClaimPeriod.WEEKLY, nextClaimPeriod: _nextClaimPeriod});\r\n\r\n        parentToChildMappingNested[msg.sender][_childAddress] = child;\r\n        childToParentMapping[_childAddress] = msg.sender;\r\n\r\n        emit ChildAdded(msg.sender, _childAddress, child);\r\n    }\r\n\r\n    /** @notice Child Function: Function for child to claim their allowance.\r\n     * @dev If the child's claim moment has ben reached it's able to claim, the next claim moment will be set based on the child's claimPeriod.\r\n     * @param _tokenToBeClaimed Address of the token which will be claimed (should be the child's prefered token).\r\n     */\r\n    function claim(address _tokenToBeClaimed) public {\r\n        bool tokenExists = false;\r\n        uint _currentTime = getCurrentTime();\r\n        address childsParent = childToParentMapping[msg.sender];\r\n        Token[] memory tokens = parentToTokensMapping[childsParent];\r\n\r\n        // Check if the token which is being claimed exists in the mapping of the child's parent.\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            if (tokens[i].tokenAddress == _tokenToBeClaimed) {\r\n                tokenExists = true;\r\n            }\r\n        }\r\n\r\n        if (tokenExists != true) {\r\n            revert ParentContract__TokenNotOwnedByParent();\r\n        }\r\n\r\n        Child storage child = parentToChildMappingNested[childsParent][msg.sender];\r\n\r\n        // Checks if the claimed token is the same as the child's current token preference, else revert.\r\n        if (child.tokenPreference != _tokenToBeClaimed) {\r\n            revert ParentContract__ClaimedTokenIsNotEqualToPreferedToken();\r\n        }\r\n\r\n        // Check if the current time has reached the nextClaimPeriod time, if it did then the claim is valid.\r\n        if (_currentTime >= child.nextClaimPeriod) {\r\n            child.claimValid = true;\r\n        }\r\n\r\n        if (child.claimValid != true) {\r\n            revert ParentContract__ClaimMomentIsNotValid();\r\n        }\r\n\r\n        child.claimValid = false; // re-entrancy guard: set valid back to false BEFORE sending the tokens.\r\n\r\n        // The next claim period is based on the current nextClaimPeriod + the respective claimPeriod (1day, 1week, 1month).\r\n        // This way unclaimed tokens can be caught up.\r\n        if (child.claimPeriod == ClaimPeriod.DAILY) {\r\n            child.nextClaimPeriod = child.nextClaimPeriod + 1 days;\r\n        } else if (child.claimPeriod == ClaimPeriod.WEEKLY) {\r\n            child.nextClaimPeriod = child.nextClaimPeriod + 1 weeks;\r\n        } else if (child.claimPeriod == ClaimPeriod.MONTHLY) {\r\n            child.nextClaimPeriod = child.nextClaimPeriod + 4 weeks;\r\n        }\r\n\r\n        IERC20(_tokenToBeClaimed).transfer(msg.sender, child.claimableAmount);\r\n        emit AllowanceClaimed(childsParent, msg.sender, child, _tokenToBeClaimed, getCurrentTime());\r\n    }\r\n\r\n    /** @dev Calculates the child's claimable amount based on their baseAmount: daily = -10%, weekly = base, monthly = +10%.\r\n     * @param _baseAmount The child's baseAmount allowance.\r\n     * @param _claimPeriod The child's claimPeriod: daily,weekly,monhtly.\r\n     * @return claimableAmount_ The child's claimable allowance.\r\n     */\r\n    function calculateClaimableAmount(uint256 _baseAmount, ClaimPeriod _claimPeriod) public pure returns (uint256 claimableAmount_) {\r\n        if (_claimPeriod == ClaimPeriod.DAILY) {\r\n            uint256 dailyAmount = _baseAmount - ((_baseAmount / 100) * 10);\r\n            claimableAmount_ = dailyAmount / 7;\r\n        } else if (_claimPeriod == ClaimPeriod.WEEKLY) {\r\n            claimableAmount_ = _baseAmount;\r\n        } else if (_claimPeriod == ClaimPeriod.MONTHLY) {\r\n            uint256 monthlyAmount = claimableAmount_ = _baseAmount + ((_baseAmount / 100) * 10);\r\n            claimableAmount_ = monthlyAmount * 4;\r\n        }\r\n\r\n        return claimableAmount_;\r\n    }\r\n\r\n    /* Getter Functions */\r\n    /** @notice Gets the next claim moment and claim period of the child who called this function.\r\n     * @return nextClaimPeriod the child's next available claim time.\r\n     * @return claimPeriod The child's selected claimPeriod (daily, weekly, monthly).\r\n     */\r\n    function getChildsNextClaimPeriod() public view returns (uint256, ClaimPeriod) {\r\n        address childsParent = getChildsParent();\r\n        Child memory child = parentToChildMappingNested[childsParent][msg.sender];\r\n\r\n        uint256 nextClaimPeriod = child.nextClaimPeriod;\r\n        ClaimPeriod claimPeriod = child.claimPeriod;\r\n        return (nextClaimPeriod, claimPeriod);\r\n    }\r\n\r\n    ///@notice Gets the current UNIX time from chain.\r\n    function getCurrentTime() public view returns (uint256) {\r\n        return block.timestamp;\r\n    }\r\n\r\n    ///@notice Child Function: Gets the parent address of the msg.sender.\r\n    function getChildsParent() public view returns (address) {\r\n        address childsParent = childToParentMapping[msg.sender];\r\n        return childsParent;\r\n    }\r\n\r\n    /// @notice Helper function used to get the balance of an ERC20 token.\r\n    function getERC20Balance(IERC20 token) public view returns (uint256) {\r\n        uint256 erc20balance = token.balanceOf(msg.sender);\r\n\r\n        return erc20balance;\r\n    }\r\n\r\n    /* Setter Functions */\r\n    /** @notice Child Function: Sets the child's claimPeriod to daily,\r\n     * by calling this function the nextClaimPeriod and claimableAmount will be set according to the claimPeriod.\r\n     */\r\n    function setChildClaimMomentDaily() public {\r\n        address childsParent = getChildsParent();\r\n\r\n        Child storage child = parentToChildMappingNested[childsParent][msg.sender];\r\n        child.claimPeriod = ClaimPeriod.DAILY;\r\n        child.nextClaimPeriod = getCurrentTime() + 1 days;\r\n\r\n        uint256 newClaimableAmount = calculateClaimableAmount(child.baseAmount, ClaimPeriod.DAILY);\r\n\r\n        child.claimableAmount = newClaimableAmount;\r\n    }\r\n\r\n    /** @notice Child Function: Sets the child's claimPeriod to weekly,\r\n     * by calling this function the nextClaimPeriod and claimableAmount will be set according to the claimPeriod.\r\n     */\r\n    function setChildClaimMomentWeekly() public {\r\n        address childsParent = getChildsParent();\r\n\r\n        Child storage child = parentToChildMappingNested[childsParent][msg.sender];\r\n        child.claimPeriod = ClaimPeriod.WEEKLY;\r\n        child.nextClaimPeriod = getCurrentTime() + 1 weeks;\r\n\r\n        uint256 newClaimableAmount = calculateClaimableAmount(child.baseAmount, ClaimPeriod.WEEKLY);\r\n\r\n        child.claimableAmount = newClaimableAmount;\r\n    }\r\n\r\n    /** @notice Child Function: Sets the child's claimPeriod to Monthly,\r\n     * by calling this function the nextClaimPeriod and claimableAmount will be set according to the claimPeriod.\r\n     */\r\n    function setChildClaimMomentMonthly() public {\r\n        address childsParent = getChildsParent();\r\n\r\n        Child storage child = parentToChildMappingNested[childsParent][msg.sender];\r\n        child.claimPeriod = ClaimPeriod.MONTHLY;\r\n        child.nextClaimPeriod = getCurrentTime() + 4 weeks;\r\n\r\n        uint256 newClaimableAmount = calculateClaimableAmount(child.baseAmount, ClaimPeriod.MONTHLY);\r\n\r\n        child.claimableAmount = newClaimableAmount;\r\n    }\r\n\r\n    /** @notice Child Function: Sets the child's prefered token for allowance.\r\n     *  @param _tokenAddress The address of the token which the child would like to receive for allowance.\r\n     */\r\n    function setChildTokenPreference(address _tokenAddress) public {\r\n        bool tokenFound = false;\r\n        address childsParent = getChildsParent();\r\n\r\n        // Check if child's parent owns the selected token.\r\n        Token[] memory tokens = parentToTokensMapping[childsParent];\r\n\r\n        for (uint i = 0; i < tokens.length; i++) {\r\n            if (tokens[i].tokenAddress == _tokenAddress) {\r\n                tokenFound = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (!tokenFound) {\r\n            revert ParentContract__TokenNotOwnedByParent();\r\n        }\r\n\r\n        Child storage child = parentToChildMappingNested[childsParent][msg.sender];\r\n        child.tokenPreference = _tokenAddress;\r\n    }\r\n}"
    },
    "contracts/TokenCreator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\r\nimport \"./ParentContract.sol\";\r\n\r\ncontract TokenCreator is ERC20 {\r\n\r\n    ParentContract public parentContract;\r\n\r\n    constructor(uint256 initialSupply, string memory tokenNameInput, string memory symbolInput) ERC20(tokenNameInput, symbolInput) {\r\n        _mint(msg.sender, initialSupply);\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}