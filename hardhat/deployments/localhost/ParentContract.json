{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwnerOfToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenPreference",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimValid",
              "type": "bool"
            },
            {
              "internalType": "enum ParentContract.ClaimPeriod",
              "name": "claimPeriod",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "nextClaimPeriod",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ParentContract.Child",
          "name": "child",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "AllowanceClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "childAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenPreference",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "baseAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "claimableAmount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "claimValid",
              "type": "bool"
            },
            {
              "internalType": "enum ParentContract.ClaimPeriod",
              "name": "claimPeriod",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "nextClaimPeriod",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ParentContract.Child",
          "name": "child",
          "type": "tuple"
        }
      ],
      "name": "ChildAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "parentAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "supply",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            }
          ],
          "indexed": false,
          "internalType": "struct ParentContract.Token",
          "name": "token",
          "type": "tuple"
        }
      ],
      "name": "TokenCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_childAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenPreference",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseAmount",
          "type": "uint256"
        }
      ],
      "name": "addChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "enum ParentContract.ClaimPeriod",
          "name": "_claimPeriod",
          "type": "uint8"
        }
      ],
      "name": "calculateClaimableAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "childToParentMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenToBeClaimed",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractDeployedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_supply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_contractName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_contractSymbol",
          "type": "string"
        }
      ],
      "name": "createNewToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getBalanceTest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChildsNextClaimPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum ParentContract.ClaimPeriod",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChildsParent",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextWeek",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "parentToChildMapping",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenPreference",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimValid",
          "type": "bool"
        },
        {
          "internalType": "enum ParentContract.ClaimPeriod",
          "name": "claimPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "nextClaimPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "parentToChildMappingNested",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "childAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenPreference",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "claimableAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "claimValid",
          "type": "bool"
        },
        {
          "internalType": "enum ParentContract.ClaimPeriod",
          "name": "claimPeriod",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "nextClaimPeriod",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "parentToTokensMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supply",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_createdTokenAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setChildClaimMomentDaily",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setChildClaimMomentMonthly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setChildClaimMomentWeekly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setNextWeek",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "test",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenCreator",
      "outputs": [
        {
          "internalType": "contract TokenCreator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa23b1cae8394b691c2dc867f567860247d44518f68aa87eba63475c78712af49",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4889742",
    "logsBloom": "0x
    "blockHash": "0xac8b3a1f9fd229184716d5f0d256cf9f205777a6ceedd33b664fb767ed8985a0",
    "transactionHash": "0xa23b1cae8394b691c2dc867f567860247d44518f68aa87eba63475c78712af49",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "4889742",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "958c80df66dddef84f557b22b5d0b9d6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwnerOfToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPreference\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimValid\",\"type\":\"bool\"},{\"internalType\":\"enum ParentContract.ClaimPeriod\",\"name\":\"claimPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimPeriod\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ParentContract.Child\",\"name\":\"child\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"AllowanceClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPreference\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimValid\",\"type\":\"bool\"},{\"internalType\":\"enum ParentContract.ClaimPeriod\",\"name\":\"claimPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimPeriod\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ParentContract.Child\",\"name\":\"child\",\"type\":\"tuple\"}],\"name\":\"ChildAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"parentAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct ParentContract.Token\",\"name\":\"token\",\"type\":\"tuple\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_childAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenPreference\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseAmount\",\"type\":\"uint256\"}],\"name\":\"addChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"enum ParentContract.ClaimPeriod\",\"name\":\"_claimPeriod\",\"type\":\"uint8\"}],\"name\":\"calculateClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"childToParentMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenToBeClaimed\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractDeployedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_contractName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_contractSymbol\",\"type\":\"string\"}],\"name\":\"createNewToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getBalanceTest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChildsNextClaimPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum ParentContract.ClaimPeriod\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChildsParent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextWeek\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parentToChildMapping\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPreference\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimValid\",\"type\":\"bool\"},{\"internalType\":\"enum ParentContract.ClaimPeriod\",\"name\":\"claimPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parentToChildMappingNested\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"childAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenPreference\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimValid\",\"type\":\"bool\"},{\"internalType\":\"enum ParentContract.ClaimPeriod\",\"name\":\"claimPeriod\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"nextClaimPeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"parentToTokensMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_createdTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setChildClaimMomentDaily\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setChildClaimMomentMonthly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setChildClaimMomentWeekly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNextWeek\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenCreator\",\"outputs\":[{\"internalType\":\"contract TokenCreator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Bram Mathijssen\",\"details\":\"Currently under construction\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for parents to supply (pocket) money as a stream to their child(ren)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"nextWeek()\":{\"notice\":\"testing -> safe to delete\"},\"setNextWeek()\":{\"notice\":\"testing -> safe to delete\"},\"test()\":{\"notice\":\"testing -> safe to delete\"}},\"notice\":\"This contract is used by both the parent as the children\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ParentContract.sol\":\"ParentContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ParentContract.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"./TokenCreator.sol\\\";\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\nerror NotOwnerOfToken();\\r\\n\\r\\n/// @title A contract for parents to supply (pocket) money as a stream to their child(ren)\\r\\n/// @author Bram Mathijssen\\r\\n/// @notice This contract is used by both the parent as the children\\r\\n/// @dev Currently under construction\\r\\ncontract ParentContract {\\r\\n    address public owner;\\r\\n    TokenCreator public tokenCreator;\\r\\n    uint public currentTime;\\r\\n    uint public contractDeployedTime;\\r\\n\\r\\n    // list of all the created token addresses\\r\\n    address[] public s_createdTokenAddresses;\\r\\n\\r\\n    // NOTE: Check if we can make this a address to address maping where a parent has multiple token addresses\\r\\n    // NOTE: So this way we could save gas, since we dont want to loop over our token list when we claim\\r\\n    // mapping of parent addresses to the coins they minted on this contract\\r\\n    mapping(address => Token[]) public parentToTokensMapping;\\r\\n\\r\\n    // NOTE: Possibly convert this to a nested mapping like in the v2 version of this contract.\\r\\n    // mapping of a parent address to a child struct\\r\\n    mapping(address => Child[]) public parentToChildMapping;\\r\\n\\r\\n    // TESTING:\\r\\n    // parents address mapped to a mapping of the childs address mapped to the child struct.\\r\\n    // this way a parent can have multiple children linked to it instead of an array which makes it more easy/cheap to retrieve the data\\r\\n    // instead of using a for loop\\r\\n    mapping(address => mapping(address => Child)) public parentToChildMappingNested;\\r\\n\\r\\n    // https://ethereum.stackexchange.com/questions/4272/getting-key-from-solidity-mapping-by-value\\r\\n    // mapping of a child to a parent address -> Bidirectional relation\\r\\n    mapping(address => address) public childToParentMapping;\\r\\n\\r\\n    enum ClaimPeriod {\\r\\n        DAILY,\\r\\n        WEEKLY,\\r\\n        MONTHLY\\r\\n    }\\r\\n\\r\\n    struct Child {\\r\\n        string name;\\r\\n        address childAddress;\\r\\n        address tokenPreference;\\r\\n        uint256 baseAmount; // the base amount of tokens to be claimed\\r\\n        uint256 claimableAmount; // the amount which can be claimed, based on the claim period: daily, weekly, monthly\\r\\n        bool claimValid;\\r\\n        ClaimPeriod claimPeriod; // claimperiod: daily, weekly, monthly\\r\\n        uint nextClaimPeriod;\\r\\n    }\\r\\n\\r\\n    // NOTE: possibly dont need to use a struct for tokens since we only need the tokenAddress\\r\\n    struct Token {\\r\\n        uint256 supply;\\r\\n        address tokenAddress;\\r\\n        string name;\\r\\n        string symbol;\\r\\n    }\\r\\n\\r\\n    // TODO: Add Events\\r\\n    event ChildAdded(address indexed parentAddress, address childAddress, Child child);\\r\\n    event TokenCreated(address indexed parentAddress, address tokenAddress, Token token);\\r\\n    event AllowanceClaimed(address indexed parentAddress, address childAddress, Child child, address tokenAddress);\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    // https://stackoverflow.com/questions/71226909/how-to-check-if-one-value-exists-in-an-array\\r\\n    // with this modifier we check if the parent owns the selected token (so if the parent address has minted the token before)\\r\\n    modifier hasMinted(address _tokenAddress) {\\r\\n        Token[] memory tokens = parentToTokensMapping[msg.sender];\\r\\n        bool tokenFound = false;\\r\\n\\r\\n        // Complexity: O(N)\\r\\n        // Chosen for this solution because the parent realistically only owns a couple of tokens which makes an O(N) complexity acceptable\\r\\n        for (uint i = 0; i < tokens.length; i++) {\\r\\n            console.log(\\\"looping: \\\", i);\\r\\n            if (tokens[i].tokenAddress == _tokenAddress) {\\r\\n                console.log(\\\"token with address\\\", tokens[i].tokenAddress);\\r\\n                tokenFound = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n        if (!tokenFound) {\\r\\n            console.log(\\\"Token not found :(\\\");\\r\\n            revert NotOwnerOfToken();\\r\\n        }\\r\\n        // executes only if a token has been found\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // creates a new ERC20 Token by deploying the TokenCreator contract\\r\\n    function createNewToken(uint256 _supply, string memory _contractName, string memory _contractSymbol) public {\\r\\n        address createdTokenAddress = address(new TokenCreator(_supply, _contractName, _contractSymbol));\\r\\n\\r\\n        s_createdTokenAddresses.push(createdTokenAddress);\\r\\n        Token memory token = Token({supply: _supply, tokenAddress: createdTokenAddress, name: _contractName, symbol: _contractSymbol});\\r\\n        parentToTokensMapping[msg.sender].push(Token({supply: _supply, tokenAddress: createdTokenAddress, name: _contractName, symbol: _contractSymbol}));\\r\\n        emit TokenCreated(msg.sender, createdTokenAddress, token);\\r\\n    }\\r\\n\\r\\n    // add an require that tests if the child's address which is being added doesn't appear in the childToParentMapping already\\r\\n    // this would mean the child is already added by another parent, and a child can only be mapped to 1 parent.\\r\\n    // also if child already exists then revert\\r\\n    function addChild(string memory _name, address _childAddress, address _tokenPreference, uint256 _baseAmount) public hasMinted(_tokenPreference) {\\r\\n        // TO DO: Make the next claim period based on the childs claim period preference: daily, weekly, monthly\\r\\n\\r\\n        uint _nextClaimPeriod = getCurrentTime() + 1 weeks;\\r\\n        uint256 _claimAbleAmount = calculateClaimableAmount(_baseAmount, ClaimPeriod.WEEKLY);\\r\\n\\r\\n        Child memory child = Child({name: _name, childAddress: _childAddress, tokenPreference: _tokenPreference, baseAmount: _baseAmount, claimableAmount: _claimAbleAmount, claimValid: false, claimPeriod: ClaimPeriod.WEEKLY, nextClaimPeriod: _nextClaimPeriod});\\r\\n\\r\\n        // bidirectional mapping: a parent is linked to (multiple) childs, and a child can be linked to only 1 parent.\\r\\n        parentToChildMapping[msg.sender].push(child);\\r\\n        parentToChildMappingNested[msg.sender][_childAddress] = child;\\r\\n        childToParentMapping[_childAddress] = msg.sender;\\r\\n\\r\\n        emit ChildAdded(msg.sender, _childAddress, child);\\r\\n    }\\r\\n\\r\\n    // this function will be called by the child\\r\\n    // add check which makes sure only the token which has been saved as tokenPreference is able to be claimed\\r\\n    function claim(IERC20 token, address _tokenToBeClaimed) public {\\r\\n        bool tokenExists = false;\\r\\n        uint _currentTime = getCurrentTime();\\r\\n\\r\\n        // gets the address of the child's parent (so the parent of whom calls this contract)\\r\\n        address childsParent = childToParentMapping[msg.sender];\\r\\n\\r\\n        // check if the token which is being claimed exists in the mapping of the child's parent\\r\\n        Token[] memory tokens = parentToTokensMapping[childsParent];\\r\\n        for (uint i = 0; i < tokens.length; i++) {\\r\\n            if (tokens[i].tokenAddress == _tokenToBeClaimed) {\\r\\n                tokenExists = true;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // if the child's parent owns the token we can continue, else revert\\r\\n        require(tokenExists == true, \\\"Token is not owned by your parent\\\");\\r\\n\\r\\n        Child storage child = parentToChildMappingNested[childsParent][msg.sender];\\r\\n\\r\\n        console.log(\\\"current time:\\\", _currentTime, \\\". Next Claim period is: \\\", child.nextClaimPeriod);\\r\\n\\r\\n        // Here we check if the current time has reached the nextClaimPeriod time, if it did then the claim is valid\\r\\n        if (_currentTime >= child.nextClaimPeriod) {\\r\\n            console.log(\\\"Claim Valid! \\\");\\r\\n            child.claimValid = true;\\r\\n        }\\r\\n\\r\\n        // if the claim is valid we can continue, else revert\\r\\n        require(child.claimValid == true, \\\"Sorry your claim period is not valid\\\");\\r\\n\\r\\n        child.claimValid = false; // re-entrancy guard to set it back to false BEFORE sending the tokens.\\r\\n\\r\\n        // setting the childs nextClaimPeriod based on the chosen ClaimMoment -> daily, weekly, monthly\\r\\n        // the next claim period is based on the current nextClaimPeriod + the respective claimPeriod (1day, 1week, 1month)\\r\\n        // this way unclaimed tokens can be caught up\\r\\n        if (child.claimPeriod == ClaimPeriod.DAILY) {\\r\\n            child.nextClaimPeriod = child.nextClaimPeriod + 1 days;\\r\\n        } else if (child.claimPeriod == ClaimPeriod.WEEKLY) {\\r\\n            child.nextClaimPeriod = child.nextClaimPeriod + 1 weeks;\\r\\n        } else if (child.claimPeriod == ClaimPeriod.MONTHLY) {\\r\\n            child.nextClaimPeriod = child.nextClaimPeriod + 4 weeks;\\r\\n        }\\r\\n\\r\\n        // sends the amount which has been specified\\r\\n        token.transfer(msg.sender, child.claimableAmount);\\r\\n        emit AllowanceClaimed(childsParent, msg.sender, child, _tokenToBeClaimed);\\r\\n    }\\r\\n\\r\\n    // NOTE: Should be internal\\r\\n    // with this function we calculate the claimable amount based on the base amount,\\r\\n    // daily = -10%\\r\\n    // weekly = base\\r\\n    // monthly = +10%\\r\\n    function calculateClaimableAmount(uint256 _baseAmount, ClaimPeriod _claimPeriod) public pure returns (uint256) {\\r\\n        uint256 _claimAbleAmount;\\r\\n        if (_claimPeriod == ClaimPeriod.DAILY) {\\r\\n            uint256 dailyAmount = _baseAmount - ((_baseAmount / 100) * 10);\\r\\n            _claimAbleAmount = dailyAmount / 7;\\r\\n        } else if (_claimPeriod == ClaimPeriod.WEEKLY) {\\r\\n            _claimAbleAmount = _baseAmount;\\r\\n        } else if (_claimPeriod == ClaimPeriod.MONTHLY) {\\r\\n            uint256 monthlyAmount = _claimAbleAmount = _baseAmount + ((_baseAmount / 100) * 10);\\r\\n            _claimAbleAmount = monthlyAmount * 4;\\r\\n        }\\r\\n\\r\\n        return _claimAbleAmount;\\r\\n    }\\r\\n\\r\\n    function getBalanceTest(IERC20 token) public view returns (uint256) {\\r\\n        uint256 erc20balance = token.balanceOf(msg.sender);\\r\\n\\r\\n        return erc20balance;\\r\\n    }\\r\\n\\r\\n    // TODO: this should be an internal function which can only be called by an public function\\r\\n    function _claim() internal {}\\r\\n\\r\\n    // TO DO: Possibly move all Timer functions to a seperate (lib) contract\\r\\n    // getters\\r\\n    function getCurrentTime() public view returns (uint256) {\\r\\n        return block.timestamp;\\r\\n    }\\r\\n\\r\\n    // gets the parent of the msg.sender\\r\\n    function getChildsParent() public view returns (address) {\\r\\n        address childsParent = childToParentMapping[msg.sender];\\r\\n        return childsParent;\\r\\n    }\\r\\n\\r\\n    // safe to delete\\r\\n    // function getChildsNextClaimPeriod() public view returns (uint256) {\\r\\n    //     address childsParent = getChildsParent();\\r\\n    //     Child memory child = parentToChildMappingNested[childsParent][msg.sender];\\r\\n\\r\\n    //     return child.nextClaimPeriod;\\r\\n    // }\\r\\n\\r\\n    // helper function to get next claimperiod (unix) and claimperiod(enum)\\r\\n    function getChildsNextClaimPeriod() public view returns (uint256, ClaimPeriod) {\\r\\n        address childsParent = getChildsParent();\\r\\n        Child memory child = parentToChildMappingNested[childsParent][msg.sender];\\r\\n\\r\\n        uint256 nextClaimPeriod = child.nextClaimPeriod;\\r\\n        ClaimPeriod claimPeriod = child.claimPeriod;\\r\\n        return (nextClaimPeriod, claimPeriod);\\r\\n    }\\r\\n\\r\\n    // SETTER Functions\\r\\n\\r\\n    // with these functions a child is able to change their individual claim periods: hourly (?), daily, weekly or monthly\\r\\n    function setChildClaimMomentDaily() public {\\r\\n        address childsParent = getChildsParent();\\r\\n\\r\\n        // NOTE: We made this storage so the value is saved\\r\\n        Child storage child = parentToChildMappingNested[childsParent][msg.sender];\\r\\n        child.claimPeriod = ClaimPeriod.DAILY;\\r\\n\\r\\n        // sets the next claim period to 1 day\\r\\n        child.nextClaimPeriod = getCurrentTime() + 1 days;\\r\\n    }\\r\\n\\r\\n    function setChildClaimMomentWeekly() public {\\r\\n        address childsParent = getChildsParent();\\r\\n\\r\\n        // NOTE: We made this storage so the value is saved to storage\\r\\n        // sets the ClaimPeriod to weekly\\r\\n        Child storage child = parentToChildMappingNested[childsParent][msg.sender];\\r\\n        child.claimPeriod = ClaimPeriod.WEEKLY;\\r\\n\\r\\n        // sets the next claim period to 1 week\\r\\n        child.nextClaimPeriod = getCurrentTime() + 1 weeks;\\r\\n    }\\r\\n\\r\\n    function setChildClaimMomentMonthly() public {\\r\\n        address childsParent = getChildsParent();\\r\\n\\r\\n        // NOTE: We made this storage so the value is saved to storage\\r\\n        Child storage child = parentToChildMappingNested[childsParent][msg.sender];\\r\\n        child.claimPeriod = ClaimPeriod.MONTHLY;\\r\\n\\r\\n        // sets the next claim period to 4 week\\r\\n        child.nextClaimPeriod = getCurrentTime() + 4 weeks;\\r\\n    }\\r\\n\\r\\n    /// testing -> safe to delete\\r\\n    function test() public view returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    /// testing -> safe to delete\\r\\n    uint256 public nextWeek;\\r\\n\\r\\n    /// testing -> safe to delete\\r\\n    function setNextWeek() public {\\r\\n        nextWeek = block.timestamp + 1 weeks;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa87565532a0de1b2e56c34ae966edc9bbf6d41872acd474fca65924eba29b61d\",\"license\":\"MIT\"},\"contracts/TokenCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"./ParentContract.sol\\\";\\r\\n\\r\\ncontract TokenCreator is ERC20 {\\r\\n\\r\\n    ParentContract public parentContract;\\r\\n\\r\\n    constructor(uint256 initialSupply, string memory tokenNameInput, string memory symbolInput) ERC20(tokenNameInput, symbolInput) {\\r\\n        _mint(msg.sender, initialSupply);\\r\\n    }\\r\\n}\",\"keccak256\":\"0xff204fc546a076ba1107a3bc1eaf4733aa6df45173150f75d5e2c4d4844a607d\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550615789806100606000396000f3fe60806040523480156200001157600080fd5b50600436106200016c5760003560e01c8063a64cbab611620000d5578063db84252c1162000087578063db84252c14620003ca578063e1727fc614620003ec578063f1f77312146200040e578063f8a8fd6d146200042e578063fbabcdd31462000450578063fd7364b71462000489576200016c565b8063a64cbab61462000315578063b0f7246b1462000321578063ca7b00721462000344578063d0bd42611462000350578063d18e81b31462000386578063da3e24f914620003a8576200016c565b806354ed78f1116200012f57806354ed78f1146200023257806376aa835f146200023e5780637a4e6c7614620002745780638da5cb5b14620002b15780639060def914620002d35780639ca4ec5914620002df576200016c565b80630590b377146200017157806321c0b342146200019157806321f0020814620001b157806327689d8214620001ee57806329cb924d1462000210575b600080fd5b6200018f60048036038101906200018991906200282e565b620004bf565b005b620001af6004803603810190620001a9919062002904565b62000d35565b005b620001cf6004803603810190620001c991906200294b565b62001493565b604051620001e598979695949392919062002ada565b60405180910390f35b620001f8620015e3565b60405162000207919062002b6f565b60405180910390f35b6200021a6200164f565b60405162000229919062002b8c565b60405180910390f35b6200023c62001657565b005b6200025c600480360381019062000256919062002ba9565b62001670565b6040516200026b919062002b8c565b60405180910390f35b6200029260048036038101906200028c919062002bdb565b620016fd565b604051620002a898979695949392919062002ada565b60405180910390f35b620002bb6200183c565b604051620002ca919062002b6f565b60405180910390f35b620002dd62001860565b005b620002fd6004803603810190620002f7919062002c4a565b62001944565b6040516200030c919062002b8c565b60405180910390f35b6200031f62001a7e565b005b6200032b62001b62565b6040516200033b92919062002c91565b60405180910390f35b6200034e62001ddf565b005b6200036e600480360381019062000368919062002cbe565b62001ec3565b6040516200037d919062002b6f565b60405180910390f35b6200039062001ef6565b6040516200039f919062002b8c565b60405180910390f35b620003b262001efc565b604051620003c1919062002b8c565b60405180910390f35b620003d462001f02565b604051620003e3919062002d5b565b60405180910390f35b620003f662001f28565b60405162000405919062002b8c565b60405180910390f35b6200042c600480360381019062000426919062002d78565b62001f2e565b005b6200043862002188565b60405162000447919062002b6f565b60405180910390f35b6200046e60048036038101906200046891906200294b565b62002190565b60405162000480949392919062002e12565b60405180910390f35b620004a76004803603810190620004a1919062002e6d565b6200231e565b604051620004b6919062002b6f565b60405180910390f35b816000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015620006e95783829060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054620005b79062002ece565b80601f0160208091040260200160405190810160405280929190818152602001828054620005e59062002ece565b8015620006365780601f106200060a5761010080835404028352916020019162000636565b820191906000526020600020905b8154815290600101906020018083116200061857829003601f168201915b50505050508152602001600382018054620006519062002ece565b80601f01602080910402602001604051908101604052809291908181526020018280546200067f9062002ece565b8015620006d05780601f10620006a457610100808354040283529160200191620006d0565b820191906000526020600020905b815481529060010190602001808311620006b257829003601f168201915b5050505050815250508152602001906001019062000521565b5050505090506000805b825181101562000815576200073e6040518060400160405280600981526020017f6c6f6f70696e673a200000000000000000000000000000000000000000000000815250826200235e565b8373ffffffffffffffffffffffffffffffffffffffff168382815181106200076b576200076a62002f03565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1603620007ff57620007f56040518060400160405280601281526020017f746f6b656e207769746820616464726573730000000000000000000000000000815250848381518110620007e357620007e262002f03565b5b602002602001015160200151620023fe565b6001915062000815565b80806200080c9062002f61565b915050620006f3565b50806200088e576200085c6040518060400160405280601281526020017f546f6b656e206e6f7420666f756e64203a2800000000000000000000000000008152506200249e565b6040517f4c084f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600062093a806200089e6200164f565b620008aa919062002fae565b90506000620008bb86600162001944565b905060006040518061010001604052808b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018381526020016000151581526020016001600281111562000935576200093462002a5a565b5b8152602001848152509050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000019081620009c09190620031b1565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff0219169083600281111562000ab15762000ab062002a5a565b5b021790555060e08201518160060155505080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908162000b569190620031b1565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff0219169083600281111562000c475762000c4662002a5a565b5b021790555060e0820151816006015590505033600860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d02b79871d7f08ec350cd2c9d6733dee2f61f43e9c8e7a6f7ac1da467b49f278a8360405162000d21929190620033ee565b60405180910390a250505050505050505050565b60008062000d426200164f565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101562000fd15783829060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805462000e9f9062002ece565b80601f016020809104026020016040519081016040528092919081815260200182805462000ecd9062002ece565b801562000f1e5780601f1062000ef25761010080835404028352916020019162000f1e565b820191906000526020600020905b81548152906001019060200180831162000f0057829003601f168201915b5050505050815260200160038201805462000f399062002ece565b80601f016020809104026020016040519081016040528092919081815260200182805462000f679062002ece565b801562000fb85780601f1062000f8c5761010080835404028352916020019162000fb8565b820191906000526020600020905b81548152906001019060200180831162000f9a57829003601f168201915b5050505050815250508152602001906001019062000e09565b50505050905060005b815181101562001054578573ffffffffffffffffffffffffffffffffffffffff1682828151811062001011576200101062002f03565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff16036200103e57600194505b80806200104b9062002f61565b91505062000fda565b5060011515841515146200109f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010969062003498565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506200119b6040518060400160405280600d81526020017f63757272656e742074696d653a00000000000000000000000000000000000000815250856040518060400160405280601881526020017f2e204e65787420436c61696d20706572696f642069733a20000000000000000081525084600601546200253b565b806006015484106200120557620011e76040518060400160405280600d81526020017f436c61696d2056616c69642120000000000000000000000000000000000000008152506200249e565b60018160050160006101000a81548160ff0219169083151502179055505b600115158160050160009054906101000a900460ff1615151462001260576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012579062003530565b60405180910390fd5b60008160050160006101000a81548160ff0219169083151502179055506000600281111562001294576200129362002a5a565b5b8160050160019054906101000a900460ff166002811115620012bb57620012ba62002a5a565b5b03620012e457620151808160060154620012d6919062002fae565b8160060181905550620013ae565b60016002811115620012fb57620012fa62002a5a565b5b8160050160019054906101000a900460ff16600281111562001322576200132162002a5a565b5b036200134b5762093a8081600601546200133d919062002fae565b8160060181905550620013ad565b60028081111562001361576200136062002a5a565b5b8160050160019054906101000a900460ff16600281111562001388576200138762002a5a565b5b03620013ac576224ea008160060154620013a3919062002fae565b81600601819055505b5b5b8673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3383600401546040518363ffffffff1660e01b8152600401620013ef92919062003552565b6020604051808303816000875af11580156200140f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014359190620035b0565b508273ffffffffffffffffffffffffffffffffffffffff167f50b888ba4b0bc55bba4f96adc25d14617d82805a959de470e1b6c91c2913b05733838960405162001482939291906200385d565b60405180910390a250505050505050565b60066020528160005260406000208181548110620014b057600080fd5b906000526020600020906007020160009150915050806000018054620014d69062002ece565b80601f0160208091040260200160405190810160405280929190818152602001828054620015049062002ece565b8015620015555780601f10620015295761010080835404028352916020019162001555565b820191906000526020600020905b8154815290600101906020018083116200153757829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060060154905088565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508091505090565b600042905090565b62093a804262001668919062002fae565b600981905550565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401620016ae919062002b6f565b602060405180830381865afa158015620016cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016f29190620038b8565b905080915050919050565b6007602052816000526040600020602052806000526040600020600091509150508060000180546200172f9062002ece565b80601f01602080910402602001604051908101604052809291908181526020018280546200175d9062002ece565b8015620017ae5780601f106200178257610100808354040283529160200191620017ae565b820191906000526020600020905b8154815290600101906020018083116200179057829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060060154905088565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006200186c620015e3565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160050160016101000a81548160ff0219169083600281111562001919576200191862002a5a565b5b021790555062093a806200192c6200164f565b62001938919062002fae565b81600601819055505050565b600080600060028111156200195e576200195d62002a5a565b5b83600281111562001974576200197362002a5a565b5b03620019c0576000600a6064866200198d919062003919565b62001999919062003951565b85620019a691906200399c565b9050600781620019b7919062003919565b91505062001a74565b60016002811115620019d757620019d662002a5a565b5b836002811115620019ed57620019ec62002a5a565b5b03620019fc5783905062001a73565b60028081111562001a125762001a1162002a5a565b5b83600281111562001a285762001a2762002a5a565b5b0362001a72576000600a60648662001a41919062003919565b62001a4d919062003951565b8562001a5a919062002fae565b915081905060048162001a6e919062003951565b9150505b5b5b8091505092915050565b600062001a8a620015e3565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060028160050160016101000a81548160ff0219169083600281111562001b375762001b3662002a5a565b5b02179055506224ea0062001b4a6200164f565b62001b56919062002fae565b81600601819055505050565b600080600062001b71620015e3565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201805462001c0f9062002ece565b80601f016020809104026020016040519081016040528092919081815260200182805462001c3d9062002ece565b801562001c8e5780601f1062001c625761010080835404028352916020019162001c8e565b820191906000526020600020905b81548152906001019060200180831162001c7057829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff16600281111562001d9a5762001d9962002a5a565b5b600281111562001daf5762001dae62002a5a565b5b8152602001600682015481525050905060008160e00151905060008260c001519050818195509550505050509091565b600062001deb620015e3565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160050160016101000a81548160ff0219169083600281111562001e985762001e9762002a5a565b5b02179055506201518062001eab6200164f565b62001eb7919062002fae565b81600601819055505050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600083838360405162001f41906200260a565b62001f4f93929190620039d7565b604051809103906000f08015801562001f6c573d6000803e3d6000fd5b5090506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060405180608001604052808681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152509050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052808781526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019081620021149190620031b1565b5060608201518160030190816200212c9190620031b1565b5050503373ffffffffffffffffffffffffffffffffffffffff167f8503319bc0664c6e8544b25c2ff39ffb8c04ec72daf3e0619230f33ba87526c583836040516200217992919062003a94565b60405180910390a25050505050565b600033905090565b60056020528160005260406000208181548110620021ad57600080fd5b9060005260206000209060040201600091509150508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054620021ff9062002ece565b80601f01602080910402602001604051908101604052809291908181526020018280546200222d9062002ece565b80156200227e5780601f1062002252576101008083540402835291602001916200227e565b820191906000526020600020905b8154815290600101906020018083116200226057829003601f168201915b505050505090806003018054620022959062002ece565b80601f0160208091040260200160405190810160405280929190818152602001828054620022c39062002ece565b8015620023145780601f10620022e85761010080835404028352916020019162002314565b820191906000526020600020905b815481529060010190602001808311620022f657829003601f168201915b5050505050905084565b600481815481106200232f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b620023fa82826040516024016200237792919062003ac8565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620025e1565b5050565b6200249a82826040516024016200241792919062003afc565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620025e1565b5050565b6200253881604051602401620024b5919062003b30565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620025e1565b50565b620025db8484848460405160240162002558949392919062003b54565b6040516020818303038152906040527fc67ea9d1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620025e1565b50505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b611ba48062003bb083390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620026818262002636565b810181811067ffffffffffffffff82111715620026a357620026a262002647565b5b80604052505050565b6000620026b862002618565b9050620026c6828262002676565b919050565b600067ffffffffffffffff821115620026e957620026e862002647565b5b620026f48262002636565b9050602081019050919050565b82818337600083830152505050565b6000620027276200272184620026cb565b620026ac565b90508281526020810184848401111562002746576200274562002631565b5b6200275384828562002701565b509392505050565b600082601f8301126200277357620027726200262c565b5b81356200278584826020860162002710565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620027bb826200278e565b9050919050565b620027cd81620027ae565b8114620027d957600080fd5b50565b600081359050620027ed81620027c2565b92915050565b6000819050919050565b6200280881620027f3565b81146200281457600080fd5b50565b6000813590506200282881620027fd565b92915050565b600080600080608085870312156200284b576200284a62002622565b5b600085013567ffffffffffffffff8111156200286c576200286b62002627565b5b6200287a878288016200275b565b94505060206200288d87828801620027dc565b9350506040620028a087828801620027dc565b9250506060620028b38782880162002817565b91505092959194509250565b6000620028cc82620027ae565b9050919050565b620028de81620028bf565b8114620028ea57600080fd5b50565b600081359050620028fe81620028d3565b92915050565b600080604083850312156200291e576200291d62002622565b5b60006200292e85828601620028ed565b92505060206200294185828601620027dc565b9150509250929050565b6000806040838503121562002965576200296462002622565b5b60006200297585828601620027dc565b9250506020620029888582860162002817565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620029ce578082015181840152602081019050620029b1565b60008484015250505050565b6000620029e78262002992565b620029f381856200299d565b935062002a05818560208601620029ae565b62002a108162002636565b840191505092915050565b62002a2681620027ae565b82525050565b62002a3781620027f3565b82525050565b60008115159050919050565b62002a548162002a3d565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811062002a9d5762002a9c62002a5a565b5b50565b600081905062002ab08262002a89565b919050565b600062002ac28262002aa0565b9050919050565b62002ad48162002ab5565b82525050565b600061010082019050818103600083015262002af7818b620029da565b905062002b08602083018a62002a1b565b62002b17604083018962002a1b565b62002b26606083018862002a2c565b62002b35608083018762002a2c565b62002b4460a083018662002a49565b62002b5360c083018562002ac9565b62002b6260e083018462002a2c565b9998505050505050505050565b600060208201905062002b86600083018462002a1b565b92915050565b600060208201905062002ba3600083018462002a2c565b92915050565b60006020828403121562002bc25762002bc162002622565b5b600062002bd284828501620028ed565b91505092915050565b6000806040838503121562002bf55762002bf462002622565b5b600062002c0585828601620027dc565b925050602062002c1885828601620027dc565b9150509250929050565b6003811062002c3057600080fd5b50565b60008135905062002c448162002c22565b92915050565b6000806040838503121562002c645762002c6362002622565b5b600062002c748582860162002817565b925050602062002c878582860162002c33565b9150509250929050565b600060408201905062002ca8600083018562002a2c565b62002cb7602083018462002ac9565b9392505050565b60006020828403121562002cd75762002cd662002622565b5b600062002ce784828501620027dc565b91505092915050565b6000819050919050565b600062002d1b62002d1562002d0f846200278e565b62002cf0565b6200278e565b9050919050565b600062002d2f8262002cfa565b9050919050565b600062002d438262002d22565b9050919050565b62002d558162002d36565b82525050565b600060208201905062002d72600083018462002d4a565b92915050565b60008060006060848603121562002d945762002d9362002622565b5b600062002da48682870162002817565b935050602084013567ffffffffffffffff81111562002dc85762002dc762002627565b5b62002dd6868287016200275b565b925050604084013567ffffffffffffffff81111562002dfa5762002df962002627565b5b62002e08868287016200275b565b9150509250925092565b600060808201905062002e29600083018762002a2c565b62002e38602083018662002a1b565b818103604083015262002e4c8185620029da565b9050818103606083015262002e628184620029da565b905095945050505050565b60006020828403121562002e865762002e8562002622565b5b600062002e968482850162002817565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062002ee757607f821691505b60208210810362002efd5762002efc62002e9f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062002f6e82620027f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362002fa35762002fa262002f32565b5b600182019050919050565b600062002fbb82620027f3565b915062002fc883620027f3565b925082820190508082111562002fe35762002fe262002f32565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200304d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200300e565b6200305986836200300e565b95508019841693508086168417925050509392505050565b6000620030926200308c6200308684620027f3565b62002cf0565b620027f3565b9050919050565b6000819050919050565b620030ae8362003071565b620030c6620030bd8262003099565b8484546200301b565b825550505050565b600090565b620030dd620030ce565b620030ea818484620030a3565b505050565b5b81811015620031125762003106600082620030d3565b600181019050620030f0565b5050565b601f82111562003161576200312b8162002fe9565b620031368462002ffe565b8101602085101562003146578190505b6200315e620031558562002ffe565b830182620030ef565b50505b505050565b600082821c905092915050565b6000620031866000198460080262003166565b1980831691505092915050565b6000620031a1838362003173565b9150826002028217905092915050565b620031bc8262002992565b67ffffffffffffffff811115620031d857620031d762002647565b5b620031e4825462002ece565b620031f182828562003116565b600060209050601f83116001811462003229576000841562003214578287015190505b62003220858262003193565b86555062003290565b601f198416620032398662002fe9565b60005b8281101562003263578489015182556001820191506020850194506020810190506200323c565b868310156200328357848901516200327f601f89168262003173565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000620032b68262002992565b620032c2818562003298565b9350620032d4818560208601620029ae565b620032df8162002636565b840191505092915050565b620032f581620027ae565b82525050565b6200330681620027f3565b82525050565b620033178162002a3d565b82525050565b620033288162002ab5565b82525050565b60006101008301600083015184820360008601526200334e8282620032a9565b9150506020830151620033656020860182620032ea565b5060408301516200337a6040860182620032ea565b5060608301516200338f6060860182620032fb565b506080830151620033a46080860182620032fb565b5060a0830151620033b960a08601826200330c565b5060c0830151620033ce60c08601826200331d565b5060e0830151620033e360e0860182620032fb565b508091505092915050565b600060408201905062003405600083018562002a1b565b81810360208301526200341981846200332e565b90509392505050565b7f546f6b656e206973206e6f74206f776e656420627920796f757220706172656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000620034806021836200299d565b91506200348d8262003422565b604082019050919050565b60006020820190508181036000830152620034b38162003471565b9050919050565b7f536f72727920796f757220636c61696d20706572696f64206973206e6f74207660008201527f616c696400000000000000000000000000000000000000000000000000000000602082015250565b6000620035186024836200299d565b91506200352582620034ba565b604082019050919050565b600060208201905081810360008301526200354b8162003509565b9050919050565b600060408201905062003569600083018562002a1b565b62003578602083018462002a2c565b9392505050565b6200358a8162002a3d565b81146200359657600080fd5b50565b600081519050620035aa816200357f565b92915050565b600060208284031215620035c957620035c862002622565b5b6000620035d98482850162003599565b91505092915050565b60008154620035f18162002ece565b620035fd818662003298565b945060018216600081146200361b5760018114620036325762003669565b60ff19831686528115156020028601935062003669565b6200363d8562002fe9565b60005b83811015620036615781548189015260018201915060208101905062003640565b808801955050505b50505092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620036b6620036b08362003672565b6200367f565b9050919050565b6000819050919050565b6000620036de620036d88362003672565b620036bd565b9050919050565b600060ff82169050919050565b600062003709620037038362003672565b620036e5565b9050919050565b60008160081c9050919050565b600060ff82169050919050565b6000620037416200373b8362003710565b6200371d565b9050919050565b6000610100830160008084018583036000870152620037688382620035e2565b925050600184015490506200377d816200369f565b6200378c6020870182620032ea565b50600284015490506200379f816200369f565b620037ae6040870182620032ea565b5060038401549050620037c181620036c7565b620037d06060870182620032fb565b5060048401549050620037e381620036c7565b620037f26080870182620032fb565b50600584015490506200380581620036f2565b6200381460a08701826200330c565b5062003820816200372a565b6200382f60c08701826200331d565b50600684015490506200384281620036c7565b6200385160e0870182620032fb565b50819250505092915050565b600060608201905062003874600083018662002a1b565b818103602083015262003888818562003748565b905062003899604083018462002a1b565b949350505050565b600081519050620038b281620027fd565b92915050565b600060208284031215620038d157620038d062002622565b5b6000620038e184828501620038a1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200392682620027f3565b91506200393383620027f3565b925082620039465762003945620038ea565b5b828204905092915050565b60006200395e82620027f3565b91506200396b83620027f3565b92508282026200397b81620027f3565b9150828204841483151762003995576200399462002f32565b5b5092915050565b6000620039a982620027f3565b9150620039b683620027f3565b9250828203905081811115620039d157620039d062002f32565b5b92915050565b6000606082019050620039ee600083018662002a2c565b818103602083015262003a028185620029da565b9050818103604083015262003a188184620029da565b9050949350505050565b600060808301600083015162003a3c6000860182620032fb565b50602083015162003a516020860182620032ea565b506040830151848203604086015262003a6b8282620032a9565b9150506060830151848203606086015262003a878282620032a9565b9150508091505092915050565b600060408201905062003aab600083018562002a1b565b818103602083015262003abf818462003a22565b90509392505050565b6000604082019050818103600083015262003ae48185620029da565b905062003af5602083018462002a2c565b9392505050565b6000604082019050818103600083015262003b188185620029da565b905062003b29602083018462002a1b565b9392505050565b6000602082019050818103600083015262003b4c8184620029da565b905092915050565b6000608082019050818103600083015262003b708187620029da565b905062003b81602083018662002a2c565b818103604083015262003b958185620029da565b905062003ba6606083018462002a2c565b9594505050505056fe60806040523480156200001157600080fd5b5060405162001ba438038062001ba48339818101604052810190620000379190620003bf565b818181600390816200004a91906200069a565b5080600490816200005c91906200069a565b5050506200007133846200007a60201b60201c565b5050506200089c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000ec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000e390620007e2565b60405180910390fd5b6200010060008383620001e760201b60201c565b806002600082825462000114919062000833565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620001c791906200087f565b60405180910390a3620001e360008383620001ec60201b60201c565b5050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6200021a8162000205565b81146200022657600080fd5b50565b6000815190506200023a816200020f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000295826200024a565b810181811067ffffffffffffffff82111715620002b757620002b66200025b565b5b80604052505050565b6000620002cc620001f1565b9050620002da82826200028a565b919050565b600067ffffffffffffffff821115620002fd57620002fc6200025b565b5b62000308826200024a565b9050602081019050919050565b60005b838110156200033557808201518184015260208101905062000318565b60008484015250505050565b6000620003586200035284620002df565b620002c0565b90508281526020810184848401111562000377576200037662000245565b5b6200038484828562000315565b509392505050565b600082601f830112620003a457620003a362000240565b5b8151620003b684826020860162000341565b91505092915050565b600080600060608486031215620003db57620003da620001fb565b5b6000620003eb8682870162000229565b935050602084015167ffffffffffffffff8111156200040f576200040e62000200565b5b6200041d868287016200038c565b925050604084015167ffffffffffffffff81111562000441576200044062000200565b5b6200044f868287016200038c565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004ac57607f821691505b602082108103620004c257620004c162000464565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200052c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004ed565b620005388683620004ed565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200057b620005756200056f8462000205565b62000550565b62000205565b9050919050565b6000819050919050565b62000597836200055a565b620005af620005a68262000582565b848454620004fa565b825550505050565b600090565b620005c6620005b7565b620005d38184846200058c565b505050565b5b81811015620005fb57620005ef600082620005bc565b600181019050620005d9565b5050565b601f8211156200064a576200061481620004c8565b6200061f84620004dd565b810160208510156200062f578190505b620006476200063e85620004dd565b830182620005d8565b50505b505050565b600082821c905092915050565b60006200066f600019846008026200064f565b1980831691505092915050565b60006200068a83836200065c565b9150826002028217905092915050565b620006a58262000459565b67ffffffffffffffff811115620006c157620006c06200025b565b5b620006cd825462000493565b620006da828285620005ff565b600060209050601f831160018114620007125760008415620006fd578287015190505b6200070985826200067c565b86555062000779565b601f1984166200072286620004c8565b60005b828110156200074c5784890151825560018201915060208501945060208101905062000725565b868310156200076c578489015162000768601f8916826200065c565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620007ca601f8362000781565b9150620007d78262000792565b602082019050919050565b60006020820190508181036000830152620007fd81620007bb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620008408262000205565b91506200084d8362000205565b925082820190508082111562000868576200086762000804565b5b92915050565b620008798162000205565b82525050565b60006020820190506200089660008301846200086e565b92915050565b6112f880620008ac6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80633950935111610071578063395093511461019157806370a08231146101c157806395d89b41146101f1578063a457c2d71461020f578063a9059cbb1461023f578063dd62ed3e1461026f576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd14610107578063230b9da31461012557806323b872dd14610143578063313ce56714610173575b600080fd5b6100c161029f565b6040516100ce9190610b5b565b60405180910390f35b6100f160048036038101906100ec9190610c16565b610331565b6040516100fe9190610c71565b60405180910390f35b61010f610354565b60405161011c9190610c9b565b60405180910390f35b61012d61035e565b60405161013a9190610d15565b60405180910390f35b61015d60048036038101906101589190610d30565b610384565b60405161016a9190610c71565b60405180910390f35b61017b6103b3565b6040516101889190610d9f565b60405180910390f35b6101ab60048036038101906101a69190610c16565b6103bc565b6040516101b89190610c71565b60405180910390f35b6101db60048036038101906101d69190610dba565b6103f3565b6040516101e89190610c9b565b60405180910390f35b6101f961043b565b6040516102069190610b5b565b60405180910390f35b61022960048036038101906102249190610c16565b6104cd565b6040516102369190610c71565b60405180910390f35b61025960048036038101906102549190610c16565b610544565b6040516102669190610c71565b60405180910390f35b61028960048036038101906102849190610de7565b610567565b6040516102969190610c9b565b60405180910390f35b6060600380546102ae90610e56565b80601f01602080910402602001604051908101604052809291908181526020018280546102da90610e56565b80156103275780601f106102fc57610100808354040283529160200191610327565b820191906000526020600020905b81548152906001019060200180831161030a57829003601f168201915b5050505050905090565b60008061033c6105ee565b90506103498185856105f6565b600191505092915050565b6000600254905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061038f6105ee565b905061039c8582856107bf565b6103a785858561084b565b60019150509392505050565b60006012905090565b6000806103c76105ee565b90506103e88185856103d98589610567565b6103e39190610eb6565b6105f6565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461044a90610e56565b80601f016020809104026020016040519081016040528092919081815260200182805461047690610e56565b80156104c35780601f10610498576101008083540402835291602001916104c3565b820191906000526020600020905b8154815290600101906020018083116104a657829003601f168201915b5050505050905090565b6000806104d86105ee565b905060006104e68286610567565b90508381101561052b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290610f5c565b60405180910390fd5b61053882868684036105f6565b60019250505092915050565b60008061054f6105ee565b905061055c81858561084b565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c90610fee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cb90611080565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107b29190610c9b565b60405180910390a3505050565b60006107cb8484610567565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108455781811015610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e906110ec565b60405180910390fd5b61084484848484036105f6565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b19061117e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092090611210565b60405180910390fd5b610934838383610ac1565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b1906112a2565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610aa89190610c9b565b60405180910390a3610abb848484610ac6565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b05578082015181840152602081019050610aea565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b2d82610acb565b610b378185610ad6565b9350610b47818560208601610ae7565b610b5081610b11565b840191505092915050565b60006020820190508181036000830152610b758184610b22565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bad82610b82565b9050919050565b610bbd81610ba2565b8114610bc857600080fd5b50565b600081359050610bda81610bb4565b92915050565b6000819050919050565b610bf381610be0565b8114610bfe57600080fd5b50565b600081359050610c1081610bea565b92915050565b60008060408385031215610c2d57610c2c610b7d565b5b6000610c3b85828601610bcb565b9250506020610c4c85828601610c01565b9150509250929050565b60008115159050919050565b610c6b81610c56565b82525050565b6000602082019050610c866000830184610c62565b92915050565b610c9581610be0565b82525050565b6000602082019050610cb06000830184610c8c565b92915050565b6000819050919050565b6000610cdb610cd6610cd184610b82565b610cb6565b610b82565b9050919050565b6000610ced82610cc0565b9050919050565b6000610cff82610ce2565b9050919050565b610d0f81610cf4565b82525050565b6000602082019050610d2a6000830184610d06565b92915050565b600080600060608486031215610d4957610d48610b7d565b5b6000610d5786828701610bcb565b9350506020610d6886828701610bcb565b9250506040610d7986828701610c01565b9150509250925092565b600060ff82169050919050565b610d9981610d83565b82525050565b6000602082019050610db46000830184610d90565b92915050565b600060208284031215610dd057610dcf610b7d565b5b6000610dde84828501610bcb565b91505092915050565b60008060408385031215610dfe57610dfd610b7d565b5b6000610e0c85828601610bcb565b9250506020610e1d85828601610bcb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e6e57607f821691505b602082108103610e8157610e80610e27565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ec182610be0565b9150610ecc83610be0565b9250828201905080821115610ee457610ee3610e87565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610f46602583610ad6565b9150610f5182610eea565b604082019050919050565b60006020820190508181036000830152610f7581610f39565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610fd8602483610ad6565b9150610fe382610f7c565b604082019050919050565b6000602082019050818103600083015261100781610fcb565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061106a602283610ad6565b91506110758261100e565b604082019050919050565b600060208201905081810360008301526110998161105d565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006110d6601d83610ad6565b91506110e1826110a0565b602082019050919050565b60006020820190508181036000830152611105816110c9565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611168602583610ad6565b91506111738261110c565b604082019050919050565b600060208201905081810360008301526111978161115b565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006111fa602383610ad6565b91506112058261119e565b604082019050919050565b60006020820190508181036000830152611229816111ed565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061128c602683610ad6565b915061129782611230565b604082019050919050565b600060208201905081810360008301526112bb8161127f565b905091905056fea2646970667358221220771a06f5e96b82e1694ebb46fe9dd28239038dc56e73a64e3e312e60efb40eb464736f6c63430008110033a2646970667358221220e08e2555338dade5dfe403cfbe7317716febb23b70cd637b741c1e08b3cc003664736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200016c5760003560e01c8063a64cbab611620000d5578063db84252c1162000087578063db84252c14620003ca578063e1727fc614620003ec578063f1f77312146200040e578063f8a8fd6d146200042e578063fbabcdd31462000450578063fd7364b71462000489576200016c565b8063a64cbab61462000315578063b0f7246b1462000321578063ca7b00721462000344578063d0bd42611462000350578063d18e81b31462000386578063da3e24f914620003a8576200016c565b806354ed78f1116200012f57806354ed78f1146200023257806376aa835f146200023e5780637a4e6c7614620002745780638da5cb5b14620002b15780639060def914620002d35780639ca4ec5914620002df576200016c565b80630590b377146200017157806321c0b342146200019157806321f0020814620001b157806327689d8214620001ee57806329cb924d1462000210575b600080fd5b6200018f60048036038101906200018991906200282e565b620004bf565b005b620001af6004803603810190620001a9919062002904565b62000d35565b005b620001cf6004803603810190620001c991906200294b565b62001493565b604051620001e598979695949392919062002ada565b60405180910390f35b620001f8620015e3565b60405162000207919062002b6f565b60405180910390f35b6200021a6200164f565b60405162000229919062002b8c565b60405180910390f35b6200023c62001657565b005b6200025c600480360381019062000256919062002ba9565b62001670565b6040516200026b919062002b8c565b60405180910390f35b6200029260048036038101906200028c919062002bdb565b620016fd565b604051620002a898979695949392919062002ada565b60405180910390f35b620002bb6200183c565b604051620002ca919062002b6f565b60405180910390f35b620002dd62001860565b005b620002fd6004803603810190620002f7919062002c4a565b62001944565b6040516200030c919062002b8c565b60405180910390f35b6200031f62001a7e565b005b6200032b62001b62565b6040516200033b92919062002c91565b60405180910390f35b6200034e62001ddf565b005b6200036e600480360381019062000368919062002cbe565b62001ec3565b6040516200037d919062002b6f565b60405180910390f35b6200039062001ef6565b6040516200039f919062002b8c565b60405180910390f35b620003b262001efc565b604051620003c1919062002b8c565b60405180910390f35b620003d462001f02565b604051620003e3919062002d5b565b60405180910390f35b620003f662001f28565b60405162000405919062002b8c565b60405180910390f35b6200042c600480360381019062000426919062002d78565b62001f2e565b005b6200043862002188565b60405162000447919062002b6f565b60405180910390f35b6200046e60048036038101906200046891906200294b565b62002190565b60405162000480949392919062002e12565b60405180910390f35b620004a76004803603810190620004a1919062002e6d565b6200231e565b604051620004b6919062002b6f565b60405180910390f35b816000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015620006e95783829060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001600282018054620005b79062002ece565b80601f0160208091040260200160405190810160405280929190818152602001828054620005e59062002ece565b8015620006365780601f106200060a5761010080835404028352916020019162000636565b820191906000526020600020905b8154815290600101906020018083116200061857829003601f168201915b50505050508152602001600382018054620006519062002ece565b80601f01602080910402602001604051908101604052809291908181526020018280546200067f9062002ece565b8015620006d05780601f10620006a457610100808354040283529160200191620006d0565b820191906000526020600020905b815481529060010190602001808311620006b257829003601f168201915b5050505050815250508152602001906001019062000521565b5050505090506000805b825181101562000815576200073e6040518060400160405280600981526020017f6c6f6f70696e673a200000000000000000000000000000000000000000000000815250826200235e565b8373ffffffffffffffffffffffffffffffffffffffff168382815181106200076b576200076a62002f03565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1603620007ff57620007f56040518060400160405280601281526020017f746f6b656e207769746820616464726573730000000000000000000000000000815250848381518110620007e357620007e262002f03565b5b602002602001015160200151620023fe565b6001915062000815565b80806200080c9062002f61565b915050620006f3565b50806200088e576200085c6040518060400160405280601281526020017f546f6b656e206e6f7420666f756e64203a2800000000000000000000000000008152506200249e565b6040517f4c084f1400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600062093a806200089e6200164f565b620008aa919062002fae565b90506000620008bb86600162001944565b905060006040518061010001604052808b81526020018a73ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018881526020018381526020016000151581526020016001600281111562000935576200093462002a5a565b5b8152602001848152509050600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002090600702016000909190919091506000820151816000019081620009c09190620031b1565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff0219169083600281111562000ab15762000ab062002a5a565b5b021790555060e08201518160060155505080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908162000b569190620031b1565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050160006101000a81548160ff02191690831515021790555060c08201518160050160016101000a81548160ff0219169083600281111562000c475762000c4662002a5a565b5b021790555060e0820151816006015590505033600860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f1d02b79871d7f08ec350cd2c9d6733dee2f61f43e9c8e7a6f7ac1da467b49f278a8360405162000d21929190620033ee565b60405180910390a250505050505050505050565b60008062000d426200164f565b90506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101562000fd15783829060005260206000209060040201604051806080016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201805462000e9f9062002ece565b80601f016020809104026020016040519081016040528092919081815260200182805462000ecd9062002ece565b801562000f1e5780601f1062000ef25761010080835404028352916020019162000f1e565b820191906000526020600020905b81548152906001019060200180831162000f0057829003601f168201915b5050505050815260200160038201805462000f399062002ece565b80601f016020809104026020016040519081016040528092919081815260200182805462000f679062002ece565b801562000fb85780601f1062000f8c5761010080835404028352916020019162000fb8565b820191906000526020600020905b81548152906001019060200180831162000f9a57829003601f168201915b5050505050815250508152602001906001019062000e09565b50505050905060005b815181101562001054578573ffffffffffffffffffffffffffffffffffffffff1682828151811062001011576200101062002f03565b5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff16036200103e57600194505b80806200104b9062002f61565b91505062000fda565b5060011515841515146200109f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620010969062003498565b60405180910390fd5b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090506200119b6040518060400160405280600d81526020017f63757272656e742074696d653a00000000000000000000000000000000000000815250856040518060400160405280601881526020017f2e204e65787420436c61696d20706572696f642069733a20000000000000000081525084600601546200253b565b806006015484106200120557620011e76040518060400160405280600d81526020017f436c61696d2056616c69642120000000000000000000000000000000000000008152506200249e565b60018160050160006101000a81548160ff0219169083151502179055505b600115158160050160009054906101000a900460ff1615151462001260576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620012579062003530565b60405180910390fd5b60008160050160006101000a81548160ff0219169083151502179055506000600281111562001294576200129362002a5a565b5b8160050160019054906101000a900460ff166002811115620012bb57620012ba62002a5a565b5b03620012e457620151808160060154620012d6919062002fae565b8160060181905550620013ae565b60016002811115620012fb57620012fa62002a5a565b5b8160050160019054906101000a900460ff16600281111562001322576200132162002a5a565b5b036200134b5762093a8081600601546200133d919062002fae565b8160060181905550620013ad565b60028081111562001361576200136062002a5a565b5b8160050160019054906101000a900460ff16600281111562001388576200138762002a5a565b5b03620013ac576224ea008160060154620013a3919062002fae565b81600601819055505b5b5b8673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb3383600401546040518363ffffffff1660e01b8152600401620013ef92919062003552565b6020604051808303816000875af11580156200140f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620014359190620035b0565b508273ffffffffffffffffffffffffffffffffffffffff167f50b888ba4b0bc55bba4f96adc25d14617d82805a959de470e1b6c91c2913b05733838960405162001482939291906200385d565b60405180910390a250505050505050565b60066020528160005260406000208181548110620014b057600080fd5b906000526020600020906007020160009150915050806000018054620014d69062002ece565b80601f0160208091040260200160405190810160405280929190818152602001828054620015049062002ece565b8015620015555780601f10620015295761010080835404028352916020019162001555565b820191906000526020600020905b8154815290600101906020018083116200153757829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060060154905088565b600080600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508091505090565b600042905090565b62093a804262001668919062002fae565b600981905550565b6000808273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401620016ae919062002b6f565b602060405180830381865afa158015620016cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620016f29190620038b8565b905080915050919050565b6007602052816000526040600020602052806000526040600020600091509150508060000180546200172f9062002ece565b80601f01602080910402602001604051908101604052809291908181526020018280546200175d9062002ece565b8015620017ae5780601f106200178257610100808354040283529160200191620017ae565b820191906000526020600020905b8154815290600101906020018083116200179057829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050160009054906101000a900460ff16908060050160019054906101000a900460ff16908060060154905088565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006200186c620015e3565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060018160050160016101000a81548160ff0219169083600281111562001919576200191862002a5a565b5b021790555062093a806200192c6200164f565b62001938919062002fae565b81600601819055505050565b600080600060028111156200195e576200195d62002a5a565b5b83600281111562001974576200197362002a5a565b5b03620019c0576000600a6064866200198d919062003919565b62001999919062003951565b85620019a691906200399c565b9050600781620019b7919062003919565b91505062001a74565b60016002811115620019d757620019d662002a5a565b5b836002811115620019ed57620019ec62002a5a565b5b03620019fc5783905062001a73565b60028081111562001a125762001a1162002a5a565b5b83600281111562001a285762001a2762002a5a565b5b0362001a72576000600a60648662001a41919062003919565b62001a4d919062003951565b8562001a5a919062002fae565b915081905060048162001a6e919062003951565b9150505b5b5b8091505092915050565b600062001a8a620015e3565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060028160050160016101000a81548160ff0219169083600281111562001b375762001b3662002a5a565b5b02179055506224ea0062001b4a6200164f565b62001b56919062002fae565b81600601819055505050565b600080600062001b71620015e3565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518061010001604052908160008201805462001c0f9062002ece565b80601f016020809104026020016040519081016040528092919081815260200182805462001c3d9062002ece565b801562001c8e5780601f1062001c625761010080835404028352916020019162001c8e565b820191906000526020600020905b81548152906001019060200180831162001c7057829003601f168201915b505050505081526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201548152602001600482015481526020016005820160009054906101000a900460ff161515151581526020016005820160019054906101000a900460ff16600281111562001d9a5762001d9962002a5a565b5b600281111562001daf5762001dae62002a5a565b5b8152602001600682015481525050905060008160e00151905060008260c001519050818195509550505050509091565b600062001deb620015e3565b90506000600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160050160016101000a81548160ff0219169083600281111562001e985762001e9762002a5a565b5b02179055506201518062001eab6200164f565b62001eb7919062002fae565b81600601819055505050565b60086020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60025481565b60095481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b600083838360405162001f41906200260a565b62001f4f93929190620039d7565b604051809103906000f08015801562001f6c573d6000803e3d6000fd5b5090506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060405180608001604052808681526020018373ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152509050600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180608001604052808781526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581525090806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002019081620021149190620031b1565b5060608201518160030190816200212c9190620031b1565b5050503373ffffffffffffffffffffffffffffffffffffffff167f8503319bc0664c6e8544b25c2ff39ffb8c04ec72daf3e0619230f33ba87526c583836040516200217992919062003a94565b60405180910390a25050505050565b600033905090565b60056020528160005260406000208181548110620021ad57600080fd5b9060005260206000209060040201600091509150508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806002018054620021ff9062002ece565b80601f01602080910402602001604051908101604052809291908181526020018280546200222d9062002ece565b80156200227e5780601f1062002252576101008083540402835291602001916200227e565b820191906000526020600020905b8154815290600101906020018083116200226057829003601f168201915b505050505090806003018054620022959062002ece565b80601f0160208091040260200160405190810160405280929190818152602001828054620022c39062002ece565b8015620023145780601f10620022e85761010080835404028352916020019162002314565b820191906000526020600020905b815481529060010190602001808311620022f657829003601f168201915b5050505050905084565b600481815481106200232f57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b620023fa82826040516024016200237792919062003ac8565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620025e1565b5050565b6200249a82826040516024016200241792919062003afc565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620025e1565b5050565b6200253881604051602401620024b5919062003b30565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620025e1565b50565b620025db8484848460405160240162002558949392919062003b54565b6040516020818303038152906040527fc67ea9d1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050620025e1565b50505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b611ba48062003bb083390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620026818262002636565b810181811067ffffffffffffffff82111715620026a357620026a262002647565b5b80604052505050565b6000620026b862002618565b9050620026c6828262002676565b919050565b600067ffffffffffffffff821115620026e957620026e862002647565b5b620026f48262002636565b9050602081019050919050565b82818337600083830152505050565b6000620027276200272184620026cb565b620026ac565b90508281526020810184848401111562002746576200274562002631565b5b6200275384828562002701565b509392505050565b600082601f8301126200277357620027726200262c565b5b81356200278584826020860162002710565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620027bb826200278e565b9050919050565b620027cd81620027ae565b8114620027d957600080fd5b50565b600081359050620027ed81620027c2565b92915050565b6000819050919050565b6200280881620027f3565b81146200281457600080fd5b50565b6000813590506200282881620027fd565b92915050565b600080600080608085870312156200284b576200284a62002622565b5b600085013567ffffffffffffffff8111156200286c576200286b62002627565b5b6200287a878288016200275b565b94505060206200288d87828801620027dc565b9350506040620028a087828801620027dc565b9250506060620028b38782880162002817565b91505092959194509250565b6000620028cc82620027ae565b9050919050565b620028de81620028bf565b8114620028ea57600080fd5b50565b600081359050620028fe81620028d3565b92915050565b600080604083850312156200291e576200291d62002622565b5b60006200292e85828601620028ed565b92505060206200294185828601620027dc565b9150509250929050565b6000806040838503121562002965576200296462002622565b5b60006200297585828601620027dc565b9250506020620029888582860162002817565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620029ce578082015181840152602081019050620029b1565b60008484015250505050565b6000620029e78262002992565b620029f381856200299d565b935062002a05818560208601620029ae565b62002a108162002636565b840191505092915050565b62002a2681620027ae565b82525050565b62002a3781620027f3565b82525050565b60008115159050919050565b62002a548162002a3d565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811062002a9d5762002a9c62002a5a565b5b50565b600081905062002ab08262002a89565b919050565b600062002ac28262002aa0565b9050919050565b62002ad48162002ab5565b82525050565b600061010082019050818103600083015262002af7818b620029da565b905062002b08602083018a62002a1b565b62002b17604083018962002a1b565b62002b26606083018862002a2c565b62002b35608083018762002a2c565b62002b4460a083018662002a49565b62002b5360c083018562002ac9565b62002b6260e083018462002a2c565b9998505050505050505050565b600060208201905062002b86600083018462002a1b565b92915050565b600060208201905062002ba3600083018462002a2c565b92915050565b60006020828403121562002bc25762002bc162002622565b5b600062002bd284828501620028ed565b91505092915050565b6000806040838503121562002bf55762002bf462002622565b5b600062002c0585828601620027dc565b925050602062002c1885828601620027dc565b9150509250929050565b6003811062002c3057600080fd5b50565b60008135905062002c448162002c22565b92915050565b6000806040838503121562002c645762002c6362002622565b5b600062002c748582860162002817565b925050602062002c878582860162002c33565b9150509250929050565b600060408201905062002ca8600083018562002a2c565b62002cb7602083018462002ac9565b9392505050565b60006020828403121562002cd75762002cd662002622565b5b600062002ce784828501620027dc565b91505092915050565b6000819050919050565b600062002d1b62002d1562002d0f846200278e565b62002cf0565b6200278e565b9050919050565b600062002d2f8262002cfa565b9050919050565b600062002d438262002d22565b9050919050565b62002d558162002d36565b82525050565b600060208201905062002d72600083018462002d4a565b92915050565b60008060006060848603121562002d945762002d9362002622565b5b600062002da48682870162002817565b935050602084013567ffffffffffffffff81111562002dc85762002dc762002627565b5b62002dd6868287016200275b565b925050604084013567ffffffffffffffff81111562002dfa5762002df962002627565b5b62002e08868287016200275b565b9150509250925092565b600060808201905062002e29600083018762002a2c565b62002e38602083018662002a1b565b818103604083015262002e4c8185620029da565b9050818103606083015262002e628184620029da565b905095945050505050565b60006020828403121562002e865762002e8562002622565b5b600062002e968482850162002817565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062002ee757607f821691505b60208210810362002efd5762002efc62002e9f565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062002f6e82620027f3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820362002fa35762002fa262002f32565b5b600182019050919050565b600062002fbb82620027f3565b915062002fc883620027f3565b925082820190508082111562002fe35762002fe262002f32565b5b92915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200304d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200300e565b6200305986836200300e565b95508019841693508086168417925050509392505050565b6000620030926200308c6200308684620027f3565b62002cf0565b620027f3565b9050919050565b6000819050919050565b620030ae8362003071565b620030c6620030bd8262003099565b8484546200301b565b825550505050565b600090565b620030dd620030ce565b620030ea818484620030a3565b505050565b5b81811015620031125762003106600082620030d3565b600181019050620030f0565b5050565b601f82111562003161576200312b8162002fe9565b620031368462002ffe565b8101602085101562003146578190505b6200315e620031558562002ffe565b830182620030ef565b50505b505050565b600082821c905092915050565b6000620031866000198460080262003166565b1980831691505092915050565b6000620031a1838362003173565b9150826002028217905092915050565b620031bc8262002992565b67ffffffffffffffff811115620031d857620031d762002647565b5b620031e4825462002ece565b620031f182828562003116565b600060209050601f83116001811462003229576000841562003214578287015190505b62003220858262003193565b86555062003290565b601f198416620032398662002fe9565b60005b8281101562003263578489015182556001820191506020850194506020810190506200323c565b868310156200328357848901516200327f601f89168262003173565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b6000620032b68262002992565b620032c2818562003298565b9350620032d4818560208601620029ae565b620032df8162002636565b840191505092915050565b620032f581620027ae565b82525050565b6200330681620027f3565b82525050565b620033178162002a3d565b82525050565b620033288162002ab5565b82525050565b60006101008301600083015184820360008601526200334e8282620032a9565b9150506020830151620033656020860182620032ea565b5060408301516200337a6040860182620032ea565b5060608301516200338f6060860182620032fb565b506080830151620033a46080860182620032fb565b5060a0830151620033b960a08601826200330c565b5060c0830151620033ce60c08601826200331d565b5060e0830151620033e360e0860182620032fb565b508091505092915050565b600060408201905062003405600083018562002a1b565b81810360208301526200341981846200332e565b90509392505050565b7f546f6b656e206973206e6f74206f776e656420627920796f757220706172656e60008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b6000620034806021836200299d565b91506200348d8262003422565b604082019050919050565b60006020820190508181036000830152620034b38162003471565b9050919050565b7f536f72727920796f757220636c61696d20706572696f64206973206e6f74207660008201527f616c696400000000000000000000000000000000000000000000000000000000602082015250565b6000620035186024836200299d565b91506200352582620034ba565b604082019050919050565b600060208201905081810360008301526200354b8162003509565b9050919050565b600060408201905062003569600083018562002a1b565b62003578602083018462002a2c565b9392505050565b6200358a8162002a3d565b81146200359657600080fd5b50565b600081519050620035aa816200357f565b92915050565b600060208284031215620035c957620035c862002622565b5b6000620035d98482850162003599565b91505092915050565b60008154620035f18162002ece565b620035fd818662003298565b945060018216600081146200361b5760018114620036325762003669565b60ff19831686528115156020028601935062003669565b6200363d8562002fe9565b60005b83811015620036615781548189015260018201915060208101905062003640565b808801955050505b50505092915050565b60008160001c9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620036b6620036b08362003672565b6200367f565b9050919050565b6000819050919050565b6000620036de620036d88362003672565b620036bd565b9050919050565b600060ff82169050919050565b600062003709620037038362003672565b620036e5565b9050919050565b60008160081c9050919050565b600060ff82169050919050565b6000620037416200373b8362003710565b6200371d565b9050919050565b6000610100830160008084018583036000870152620037688382620035e2565b925050600184015490506200377d816200369f565b6200378c6020870182620032ea565b50600284015490506200379f816200369f565b620037ae6040870182620032ea565b5060038401549050620037c181620036c7565b620037d06060870182620032fb565b5060048401549050620037e381620036c7565b620037f26080870182620032fb565b50600584015490506200380581620036f2565b6200381460a08701826200330c565b5062003820816200372a565b6200382f60c08701826200331d565b50600684015490506200384281620036c7565b6200385160e0870182620032fb565b50819250505092915050565b600060608201905062003874600083018662002a1b565b818103602083015262003888818562003748565b905062003899604083018462002a1b565b949350505050565b600081519050620038b281620027fd565b92915050565b600060208284031215620038d157620038d062002622565b5b6000620038e184828501620038a1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200392682620027f3565b91506200393383620027f3565b925082620039465762003945620038ea565b5b828204905092915050565b60006200395e82620027f3565b91506200396b83620027f3565b92508282026200397b81620027f3565b9150828204841483151762003995576200399462002f32565b5b5092915050565b6000620039a982620027f3565b9150620039b683620027f3565b9250828203905081811115620039d157620039d062002f32565b5b92915050565b6000606082019050620039ee600083018662002a2c565b818103602083015262003a028185620029da565b9050818103604083015262003a188184620029da565b9050949350505050565b600060808301600083015162003a3c6000860182620032fb565b50602083015162003a516020860182620032ea565b506040830151848203604086015262003a6b8282620032a9565b9150506060830151848203606086015262003a878282620032a9565b9150508091505092915050565b600060408201905062003aab600083018562002a1b565b818103602083015262003abf818462003a22565b90509392505050565b6000604082019050818103600083015262003ae48185620029da565b905062003af5602083018462002a2c565b9392505050565b6000604082019050818103600083015262003b188185620029da565b905062003b29602083018462002a1b565b9392505050565b6000602082019050818103600083015262003b4c8184620029da565b905092915050565b6000608082019050818103600083015262003b708187620029da565b905062003b81602083018662002a2c565b818103604083015262003b958185620029da565b905062003ba6606083018462002a2c565b9594505050505056fe60806040523480156200001157600080fd5b5060405162001ba438038062001ba48339818101604052810190620000379190620003bf565b818181600390816200004a91906200069a565b5080600490816200005c91906200069a565b5050506200007133846200007a60201b60201c565b5050506200089c565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620000ec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000e390620007e2565b60405180910390fd5b6200010060008383620001e760201b60201c565b806002600082825462000114919062000833565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620001c791906200087f565b60405180910390a3620001e360008383620001ec60201b60201c565b5050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6200021a8162000205565b81146200022657600080fd5b50565b6000815190506200023a816200020f565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000295826200024a565b810181811067ffffffffffffffff82111715620002b757620002b66200025b565b5b80604052505050565b6000620002cc620001f1565b9050620002da82826200028a565b919050565b600067ffffffffffffffff821115620002fd57620002fc6200025b565b5b62000308826200024a565b9050602081019050919050565b60005b838110156200033557808201518184015260208101905062000318565b60008484015250505050565b6000620003586200035284620002df565b620002c0565b90508281526020810184848401111562000377576200037662000245565b5b6200038484828562000315565b509392505050565b600082601f830112620003a457620003a362000240565b5b8151620003b684826020860162000341565b91505092915050565b600080600060608486031215620003db57620003da620001fb565b5b6000620003eb8682870162000229565b935050602084015167ffffffffffffffff8111156200040f576200040e62000200565b5b6200041d868287016200038c565b925050604084015167ffffffffffffffff81111562000441576200044062000200565b5b6200044f868287016200038c565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620004ac57607f821691505b602082108103620004c257620004c162000464565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200052c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004ed565b620005388683620004ed565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200057b620005756200056f8462000205565b62000550565b62000205565b9050919050565b6000819050919050565b62000597836200055a565b620005af620005a68262000582565b848454620004fa565b825550505050565b600090565b620005c6620005b7565b620005d38184846200058c565b505050565b5b81811015620005fb57620005ef600082620005bc565b600181019050620005d9565b5050565b601f8211156200064a576200061481620004c8565b6200061f84620004dd565b810160208510156200062f578190505b620006476200063e85620004dd565b830182620005d8565b50505b505050565b600082821c905092915050565b60006200066f600019846008026200064f565b1980831691505092915050565b60006200068a83836200065c565b9150826002028217905092915050565b620006a58262000459565b67ffffffffffffffff811115620006c157620006c06200025b565b5b620006cd825462000493565b620006da828285620005ff565b600060209050601f831160018114620007125760008415620006fd578287015190505b6200070985826200067c565b86555062000779565b601f1984166200072286620004c8565b60005b828110156200074c5784890151825560018201915060208501945060208101905062000725565b868310156200076c578489015162000768601f8916826200065c565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000620007ca601f8362000781565b9150620007d78262000792565b602082019050919050565b60006020820190508181036000830152620007fd81620007bb565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620008408262000205565b91506200084d8362000205565b925082820190508082111562000868576200086762000804565b5b92915050565b620008798162000205565b82525050565b60006020820190506200089660008301846200086e565b92915050565b6112f880620008ac6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80633950935111610071578063395093511461019157806370a08231146101c157806395d89b41146101f1578063a457c2d71461020f578063a9059cbb1461023f578063dd62ed3e1461026f576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd14610107578063230b9da31461012557806323b872dd14610143578063313ce56714610173575b600080fd5b6100c161029f565b6040516100ce9190610b5b565b60405180910390f35b6100f160048036038101906100ec9190610c16565b610331565b6040516100fe9190610c71565b60405180910390f35b61010f610354565b60405161011c9190610c9b565b60405180910390f35b61012d61035e565b60405161013a9190610d15565b60405180910390f35b61015d60048036038101906101589190610d30565b610384565b60405161016a9190610c71565b60405180910390f35b61017b6103b3565b6040516101889190610d9f565b60405180910390f35b6101ab60048036038101906101a69190610c16565b6103bc565b6040516101b89190610c71565b60405180910390f35b6101db60048036038101906101d69190610dba565b6103f3565b6040516101e89190610c9b565b60405180910390f35b6101f961043b565b6040516102069190610b5b565b60405180910390f35b61022960048036038101906102249190610c16565b6104cd565b6040516102369190610c71565b60405180910390f35b61025960048036038101906102549190610c16565b610544565b6040516102669190610c71565b60405180910390f35b61028960048036038101906102849190610de7565b610567565b6040516102969190610c9b565b60405180910390f35b6060600380546102ae90610e56565b80601f01602080910402602001604051908101604052809291908181526020018280546102da90610e56565b80156103275780601f106102fc57610100808354040283529160200191610327565b820191906000526020600020905b81548152906001019060200180831161030a57829003601f168201915b5050505050905090565b60008061033c6105ee565b90506103498185856105f6565b600191505092915050565b6000600254905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061038f6105ee565b905061039c8582856107bf565b6103a785858561084b565b60019150509392505050565b60006012905090565b6000806103c76105ee565b90506103e88185856103d98589610567565b6103e39190610eb6565b6105f6565b600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461044a90610e56565b80601f016020809104026020016040519081016040528092919081815260200182805461047690610e56565b80156104c35780601f10610498576101008083540402835291602001916104c3565b820191906000526020600020905b8154815290600101906020018083116104a657829003601f168201915b5050505050905090565b6000806104d86105ee565b905060006104e68286610567565b90508381101561052b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290610f5c565b60405180910390fd5b61053882868684036105f6565b60019250505092915050565b60008061054f6105ee565b905061055c81858561084b565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065c90610fee565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106cb90611080565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107b29190610c9b565b60405180910390a3505050565b60006107cb8484610567565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108455781811015610837576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161082e906110ec565b60405180910390fd5b61084484848484036105f6565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b19061117e565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610929576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092090611210565b60405180910390fd5b610934838383610ac1565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b1906112a2565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610aa89190610c9b565b60405180910390a3610abb848484610ac6565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b05578082015181840152602081019050610aea565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b2d82610acb565b610b378185610ad6565b9350610b47818560208601610ae7565b610b5081610b11565b840191505092915050565b60006020820190508181036000830152610b758184610b22565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bad82610b82565b9050919050565b610bbd81610ba2565b8114610bc857600080fd5b50565b600081359050610bda81610bb4565b92915050565b6000819050919050565b610bf381610be0565b8114610bfe57600080fd5b50565b600081359050610c1081610bea565b92915050565b60008060408385031215610c2d57610c2c610b7d565b5b6000610c3b85828601610bcb565b9250506020610c4c85828601610c01565b9150509250929050565b60008115159050919050565b610c6b81610c56565b82525050565b6000602082019050610c866000830184610c62565b92915050565b610c9581610be0565b82525050565b6000602082019050610cb06000830184610c8c565b92915050565b6000819050919050565b6000610cdb610cd6610cd184610b82565b610cb6565b610b82565b9050919050565b6000610ced82610cc0565b9050919050565b6000610cff82610ce2565b9050919050565b610d0f81610cf4565b82525050565b6000602082019050610d2a6000830184610d06565b92915050565b600080600060608486031215610d4957610d48610b7d565b5b6000610d5786828701610bcb565b9350506020610d6886828701610bcb565b9250506040610d7986828701610c01565b9150509250925092565b600060ff82169050919050565b610d9981610d83565b82525050565b6000602082019050610db46000830184610d90565b92915050565b600060208284031215610dd057610dcf610b7d565b5b6000610dde84828501610bcb565b91505092915050565b60008060408385031215610dfe57610dfd610b7d565b5b6000610e0c85828601610bcb565b9250506020610e1d85828601610bcb565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e6e57607f821691505b602082108103610e8157610e80610e27565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ec182610be0565b9150610ecc83610be0565b9250828201905080821115610ee457610ee3610e87565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610f46602583610ad6565b9150610f5182610eea565b604082019050919050565b60006020820190508181036000830152610f7581610f39565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610fd8602483610ad6565b9150610fe382610f7c565b604082019050919050565b6000602082019050818103600083015261100781610fcb565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061106a602283610ad6565b91506110758261100e565b604082019050919050565b600060208201905081810360008301526110998161105d565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006110d6601d83610ad6565b91506110e1826110a0565b602082019050919050565b60006020820190508181036000830152611105816110c9565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000611168602583610ad6565b91506111738261110c565b604082019050919050565b600060208201905081810360008301526111978161115b565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006111fa602383610ad6565b91506112058261119e565b604082019050919050565b60006020820190508181036000830152611229816111ed565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061128c602683610ad6565b915061129782611230565b604082019050919050565b600060208201905081810360008301526112bb8161127f565b905091905056fea2646970667358221220771a06f5e96b82e1694ebb46fe9dd28239038dc56e73a64e3e312e60efb40eb464736f6c63430008110033a2646970667358221220e08e2555338dade5dfe403cfbe7317716febb23b70cd637b741c1e08b3cc003664736f6c63430008110033",
  "devdoc": {
    "author": "Bram Mathijssen",
    "details": "Currently under construction",
    "kind": "dev",
    "methods": {},
    "title": "A contract for parents to supply (pocket) money as a stream to their child(ren)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "nextWeek()": {
        "notice": "testing -> safe to delete"
      },
      "setNextWeek()": {
        "notice": "testing -> safe to delete"
      },
      "test()": {
        "notice": "testing -> safe to delete"
      }
    },
    "notice": "This contract is used by both the parent as the children",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1369,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1372,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "tokenCreator",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(TokenCreator)2188"
      },
      {
        "astId": 1374,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "currentTime",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1376,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "contractDeployedTime",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1379,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "s_createdTokenAddresses",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1385,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "parentToTokensMapping",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_array(t_struct(Token)1433_storage)dyn_storage)"
      },
      {
        "astId": 1391,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "parentToChildMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(Child)1424_storage)dyn_storage)"
      },
      {
        "astId": 1398,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "parentToChildMappingNested",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Child)1424_storage))"
      },
      {
        "astId": 1402,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "childToParentMapping",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2145,
        "contract": "contracts/ParentContract.sol:ParentContract",
        "label": "nextWeek",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Child)1424_storage)dyn_storage": {
        "base": "t_struct(Child)1424_storage",
        "encoding": "dynamic_array",
        "label": "struct ParentContract.Child[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Token)1433_storage)dyn_storage": {
        "base": "t_struct(Token)1433_storage",
        "encoding": "dynamic_array",
        "label": "struct ParentContract.Token[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(TokenCreator)2188": {
        "encoding": "inplace",
        "label": "contract TokenCreator",
        "numberOfBytes": "20"
      },
      "t_enum(ClaimPeriod)1406": {
        "encoding": "inplace",
        "label": "enum ParentContract.ClaimPeriod",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(Child)1424_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ParentContract.Child[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Child)1424_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_struct(Token)1433_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ParentContract.Token[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Token)1433_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Child)1424_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct ParentContract.Child))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Child)1424_storage)"
      },
      "t_mapping(t_address,t_struct(Child)1424_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ParentContract.Child)",
        "numberOfBytes": "32",
        "value": "t_struct(Child)1424_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Child)1424_storage": {
        "encoding": "inplace",
        "label": "struct ParentContract.Child",
        "members": [
          {
            "astId": 1408,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1410,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "childAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1412,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "tokenPreference",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1414,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "baseAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1416,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "claimableAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1418,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "claimValid",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 1421,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "claimPeriod",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(ClaimPeriod)1406"
          },
          {
            "astId": 1423,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "nextClaimPeriod",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Token)1433_storage": {
        "encoding": "inplace",
        "label": "struct ParentContract.Token",
        "members": [
          {
            "astId": 1426,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "supply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1428,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1430,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "name",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 1432,
            "contract": "contracts/ParentContract.sol:ParentContract",
            "label": "symbol",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}