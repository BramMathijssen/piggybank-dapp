// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChildAdded extends ethereum.Event {
  get params(): ChildAdded__Params {
    return new ChildAdded__Params(this);
  }
}

export class ChildAdded__Params {
  _event: ChildAdded;

  constructor(event: ChildAdded) {
    this._event = event;
  }

  get child(): ChildAddedChildStruct {
    return changetype<ChildAddedChildStruct>(
      this._event.parameters[0].value.toTuple()
    );
  }

  get childAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get parentAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ChildAddedChildStruct extends ethereum.Tuple {
  get name(): string {
    return this[0].toString();
  }

  get childAddress(): Address {
    return this[1].toAddress();
  }

  get tokenPreference(): Address {
    return this[2].toAddress();
  }

  get baseAmount(): BigInt {
    return this[3].toBigInt();
  }

  get claimableAmount(): BigInt {
    return this[4].toBigInt();
  }

  get claimValid(): boolean {
    return this[5].toBoolean();
  }

  get claimPeriod(): i32 {
    return this[6].toI32();
  }

  get nextClaimPeriod(): BigInt {
    return this[7].toBigInt();
  }
}

export class TokenCreated extends ethereum.Event {
  get params(): TokenCreated__Params {
    return new TokenCreated__Params(this);
  }
}

export class TokenCreated__Params {
  _event: TokenCreated;

  constructor(event: TokenCreated) {
    this._event = event;
  }

  get parentAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): TokenCreatedTokenStruct {
    return changetype<TokenCreatedTokenStruct>(
      this._event.parameters[2].value.toTuple()
    );
  }
}

export class TokenCreatedTokenStruct extends ethereum.Tuple {
  get supply(): BigInt {
    return this[0].toBigInt();
  }

  get tokenAddress(): Address {
    return this[1].toAddress();
  }

  get name(): string {
    return this[2].toString();
  }

  get symbol(): string {
    return this[3].toString();
  }
}

export class ParentContract__getChildsNextClaimPeriodResult {
  value0: BigInt;
  value1: i32;

  constructor(value0: BigInt, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class ParentContract__parentToChildMappingResult {
  value0: string;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: i32;
  value7: BigInt;

  constructor(
    value0: string,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: i32,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getChildAddress(): Address {
    return this.value1;
  }

  getTokenPreference(): Address {
    return this.value2;
  }

  getBaseAmount(): BigInt {
    return this.value3;
  }

  getClaimableAmount(): BigInt {
    return this.value4;
  }

  getClaimValid(): boolean {
    return this.value5;
  }

  getClaimPeriod(): i32 {
    return this.value6;
  }

  getNextClaimPeriod(): BigInt {
    return this.value7;
  }
}

export class ParentContract__parentToChildMappingNestedResult {
  value0: string;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: i32;
  value7: BigInt;

  constructor(
    value0: string,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: i32,
    value7: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set(
      "value6",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value6))
    );
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    return map;
  }

  getName(): string {
    return this.value0;
  }

  getChildAddress(): Address {
    return this.value1;
  }

  getTokenPreference(): Address {
    return this.value2;
  }

  getBaseAmount(): BigInt {
    return this.value3;
  }

  getClaimableAmount(): BigInt {
    return this.value4;
  }

  getClaimValid(): boolean {
    return this.value5;
  }

  getClaimPeriod(): i32 {
    return this.value6;
  }

  getNextClaimPeriod(): BigInt {
    return this.value7;
  }
}

export class ParentContract__parentToTokensMappingResult {
  value0: BigInt;
  value1: Address;
  value2: string;
  value3: string;

  constructor(value0: BigInt, value1: Address, value2: string, value3: string) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    return map;
  }

  getSupply(): BigInt {
    return this.value0;
  }

  getTokenAddress(): Address {
    return this.value1;
  }

  getName(): string {
    return this.value2;
  }

  getSymbol(): string {
    return this.value3;
  }
}

export class ParentContract extends ethereum.SmartContract {
  static bind(address: Address): ParentContract {
    return new ParentContract("ParentContract", address);
  }

  calculateClaimableAmount(_baseAmount: BigInt, _claimPeriod: i32): BigInt {
    let result = super.call(
      "calculateClaimableAmount",
      "calculateClaimableAmount(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_baseAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_claimPeriod))
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateClaimableAmount(
    _baseAmount: BigInt,
    _claimPeriod: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateClaimableAmount",
      "calculateClaimableAmount(uint256,uint8):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_baseAmount),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_claimPeriod))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  childToParentMapping(param0: Address): Address {
    let result = super.call(
      "childToParentMapping",
      "childToParentMapping(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_childToParentMapping(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "childToParentMapping",
      "childToParentMapping(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  contractDeployedTime(): BigInt {
    let result = super.call(
      "contractDeployedTime",
      "contractDeployedTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_contractDeployedTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "contractDeployedTime",
      "contractDeployedTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentTime(): BigInt {
    let result = super.call("currentTime", "currentTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_currentTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("currentTime", "currentTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBalanceTest(token: Address): BigInt {
    let result = super.call(
      "getBalanceTest",
      "getBalanceTest(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_getBalanceTest(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBalanceTest",
      "getBalanceTest(address):(uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChildsNextClaimPeriod(): ParentContract__getChildsNextClaimPeriodResult {
    let result = super.call(
      "getChildsNextClaimPeriod",
      "getChildsNextClaimPeriod():(uint256,uint8)",
      []
    );

    return new ParentContract__getChildsNextClaimPeriodResult(
      result[0].toBigInt(),
      result[1].toI32()
    );
  }

  try_getChildsNextClaimPeriod(): ethereum.CallResult<
    ParentContract__getChildsNextClaimPeriodResult
  > {
    let result = super.tryCall(
      "getChildsNextClaimPeriod",
      "getChildsNextClaimPeriod():(uint256,uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ParentContract__getChildsNextClaimPeriodResult(
        value[0].toBigInt(),
        value[1].toI32()
      )
    );
  }

  getChildsParent(): Address {
    let result = super.call(
      "getChildsParent",
      "getChildsParent():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getChildsParent(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getChildsParent",
      "getChildsParent():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCurrentTime(): BigInt {
    let result = super.call("getCurrentTime", "getCurrentTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getCurrentTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentTime",
      "getCurrentTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextWeek(): BigInt {
    let result = super.call("nextWeek", "nextWeek():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextWeek(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextWeek", "nextWeek():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parentToChildMapping(
    param0: Address,
    param1: BigInt
  ): ParentContract__parentToChildMappingResult {
    let result = super.call(
      "parentToChildMapping",
      "parentToChildMapping(address,uint256):(string,address,address,uint256,uint256,bool,uint8,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new ParentContract__parentToChildMappingResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toI32(),
      result[7].toBigInt()
    );
  }

  try_parentToChildMapping(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<ParentContract__parentToChildMappingResult> {
    let result = super.tryCall(
      "parentToChildMapping",
      "parentToChildMapping(address,uint256):(string,address,address,uint256,uint256,bool,uint8,uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ParentContract__parentToChildMappingResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toI32(),
        value[7].toBigInt()
      )
    );
  }

  parentToChildMappingNested(
    param0: Address,
    param1: Address
  ): ParentContract__parentToChildMappingNestedResult {
    let result = super.call(
      "parentToChildMappingNested",
      "parentToChildMappingNested(address,address):(string,address,address,uint256,uint256,bool,uint8,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );

    return new ParentContract__parentToChildMappingNestedResult(
      result[0].toString(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toI32(),
      result[7].toBigInt()
    );
  }

  try_parentToChildMappingNested(
    param0: Address,
    param1: Address
  ): ethereum.CallResult<ParentContract__parentToChildMappingNestedResult> {
    let result = super.tryCall(
      "parentToChildMappingNested",
      "parentToChildMappingNested(address,address):(string,address,address,uint256,uint256,bool,uint8,uint256)",
      [ethereum.Value.fromAddress(param0), ethereum.Value.fromAddress(param1)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ParentContract__parentToChildMappingNestedResult(
        value[0].toString(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toI32(),
        value[7].toBigInt()
      )
    );
  }

  parentToTokensMapping(
    param0: Address,
    param1: BigInt
  ): ParentContract__parentToTokensMappingResult {
    let result = super.call(
      "parentToTokensMapping",
      "parentToTokensMapping(address,uint256):(uint256,address,string,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new ParentContract__parentToTokensMappingResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toString(),
      result[3].toString()
    );
  }

  try_parentToTokensMapping(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<ParentContract__parentToTokensMappingResult> {
    let result = super.tryCall(
      "parentToTokensMapping",
      "parentToTokensMapping(address,uint256):(uint256,address,string,string)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ParentContract__parentToTokensMappingResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toString(),
        value[3].toString()
      )
    );
  }

  s_createdTokenAddresses(param0: BigInt): Address {
    let result = super.call(
      "s_createdTokenAddresses",
      "s_createdTokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_s_createdTokenAddresses(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "s_createdTokenAddresses",
      "s_createdTokenAddresses(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  test(): Address {
    let result = super.call("test", "test():(address)", []);

    return result[0].toAddress();
  }

  try_test(): ethereum.CallResult<Address> {
    let result = super.tryCall("test", "test():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenCreator(): Address {
    let result = super.call("tokenCreator", "tokenCreator():(address)", []);

    return result[0].toAddress();
  }

  try_tokenCreator(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenCreator", "tokenCreator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddChildCall extends ethereum.Call {
  get inputs(): AddChildCall__Inputs {
    return new AddChildCall__Inputs(this);
  }

  get outputs(): AddChildCall__Outputs {
    return new AddChildCall__Outputs(this);
  }
}

export class AddChildCall__Inputs {
  _call: AddChildCall;

  constructor(call: AddChildCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _childAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenPreference(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _baseAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AddChildCall__Outputs {
  _call: AddChildCall;

  constructor(call: AddChildCall) {
    this._call = call;
  }
}

export class ClaimCall extends ethereum.Call {
  get inputs(): ClaimCall__Inputs {
    return new ClaimCall__Inputs(this);
  }

  get outputs(): ClaimCall__Outputs {
    return new ClaimCall__Outputs(this);
  }
}

export class ClaimCall__Inputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenToBeClaimed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ClaimCall__Outputs {
  _call: ClaimCall;

  constructor(call: ClaimCall) {
    this._call = call;
  }
}

export class CreateNewTokenCall extends ethereum.Call {
  get inputs(): CreateNewTokenCall__Inputs {
    return new CreateNewTokenCall__Inputs(this);
  }

  get outputs(): CreateNewTokenCall__Outputs {
    return new CreateNewTokenCall__Outputs(this);
  }
}

export class CreateNewTokenCall__Inputs {
  _call: CreateNewTokenCall;

  constructor(call: CreateNewTokenCall) {
    this._call = call;
  }

  get _supply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _contractName(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _contractSymbol(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CreateNewTokenCall__Outputs {
  _call: CreateNewTokenCall;

  constructor(call: CreateNewTokenCall) {
    this._call = call;
  }
}

export class SetChildClaimMomentDailyCall extends ethereum.Call {
  get inputs(): SetChildClaimMomentDailyCall__Inputs {
    return new SetChildClaimMomentDailyCall__Inputs(this);
  }

  get outputs(): SetChildClaimMomentDailyCall__Outputs {
    return new SetChildClaimMomentDailyCall__Outputs(this);
  }
}

export class SetChildClaimMomentDailyCall__Inputs {
  _call: SetChildClaimMomentDailyCall;

  constructor(call: SetChildClaimMomentDailyCall) {
    this._call = call;
  }
}

export class SetChildClaimMomentDailyCall__Outputs {
  _call: SetChildClaimMomentDailyCall;

  constructor(call: SetChildClaimMomentDailyCall) {
    this._call = call;
  }
}

export class SetChildClaimMomentMonthlyCall extends ethereum.Call {
  get inputs(): SetChildClaimMomentMonthlyCall__Inputs {
    return new SetChildClaimMomentMonthlyCall__Inputs(this);
  }

  get outputs(): SetChildClaimMomentMonthlyCall__Outputs {
    return new SetChildClaimMomentMonthlyCall__Outputs(this);
  }
}

export class SetChildClaimMomentMonthlyCall__Inputs {
  _call: SetChildClaimMomentMonthlyCall;

  constructor(call: SetChildClaimMomentMonthlyCall) {
    this._call = call;
  }
}

export class SetChildClaimMomentMonthlyCall__Outputs {
  _call: SetChildClaimMomentMonthlyCall;

  constructor(call: SetChildClaimMomentMonthlyCall) {
    this._call = call;
  }
}

export class SetChildClaimMomentWeeklyCall extends ethereum.Call {
  get inputs(): SetChildClaimMomentWeeklyCall__Inputs {
    return new SetChildClaimMomentWeeklyCall__Inputs(this);
  }

  get outputs(): SetChildClaimMomentWeeklyCall__Outputs {
    return new SetChildClaimMomentWeeklyCall__Outputs(this);
  }
}

export class SetChildClaimMomentWeeklyCall__Inputs {
  _call: SetChildClaimMomentWeeklyCall;

  constructor(call: SetChildClaimMomentWeeklyCall) {
    this._call = call;
  }
}

export class SetChildClaimMomentWeeklyCall__Outputs {
  _call: SetChildClaimMomentWeeklyCall;

  constructor(call: SetChildClaimMomentWeeklyCall) {
    this._call = call;
  }
}

export class SetNextWeekCall extends ethereum.Call {
  get inputs(): SetNextWeekCall__Inputs {
    return new SetNextWeekCall__Inputs(this);
  }

  get outputs(): SetNextWeekCall__Outputs {
    return new SetNextWeekCall__Outputs(this);
  }
}

export class SetNextWeekCall__Inputs {
  _call: SetNextWeekCall;

  constructor(call: SetNextWeekCall) {
    this._call = call;
  }
}

export class SetNextWeekCall__Outputs {
  _call: SetNextWeekCall;

  constructor(call: SetNextWeekCall) {
    this._call = call;
  }
}
