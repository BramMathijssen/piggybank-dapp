// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ChildAdded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChildAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ChildAdded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChildAdded", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ChildAdded | null {
    return changetype<ChildAdded | null>(
      store.get("ChildAdded", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get child_name(): string {
    let value = this.get("child_name");
    return value!.toString();
  }

  set child_name(value: string) {
    this.set("child_name", Value.fromString(value));
  }

  get child_childAddress(): Bytes {
    let value = this.get("child_childAddress");
    return value!.toBytes();
  }

  set child_childAddress(value: Bytes) {
    this.set("child_childAddress", Value.fromBytes(value));
  }

  get child_tokenPreference(): Bytes {
    let value = this.get("child_tokenPreference");
    return value!.toBytes();
  }

  set child_tokenPreference(value: Bytes) {
    this.set("child_tokenPreference", Value.fromBytes(value));
  }

  get child_baseAmount(): BigInt {
    let value = this.get("child_baseAmount");
    return value!.toBigInt();
  }

  set child_baseAmount(value: BigInt) {
    this.set("child_baseAmount", Value.fromBigInt(value));
  }

  get child_claimableAmount(): BigInt {
    let value = this.get("child_claimableAmount");
    return value!.toBigInt();
  }

  set child_claimableAmount(value: BigInt) {
    this.set("child_claimableAmount", Value.fromBigInt(value));
  }

  get child_claimValid(): boolean {
    let value = this.get("child_claimValid");
    return value!.toBoolean();
  }

  set child_claimValid(value: boolean) {
    this.set("child_claimValid", Value.fromBoolean(value));
  }

  get child_claimPeriod(): i32 {
    let value = this.get("child_claimPeriod");
    return value!.toI32();
  }

  set child_claimPeriod(value: i32) {
    this.set("child_claimPeriod", Value.fromI32(value));
  }

  get child_nextClaimPeriod(): BigInt {
    let value = this.get("child_nextClaimPeriod");
    return value!.toBigInt();
  }

  set child_nextClaimPeriod(value: BigInt) {
    this.set("child_nextClaimPeriod", Value.fromBigInt(value));
  }

  get childAddress(): Bytes {
    let value = this.get("childAddress");
    return value!.toBytes();
  }

  set childAddress(value: Bytes) {
    this.set("childAddress", Value.fromBytes(value));
  }

  get parentAddress(): Bytes {
    let value = this.get("parentAddress");
    return value!.toBytes();
  }

  set parentAddress(value: Bytes) {
    this.set("parentAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokenCreated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenCreated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenCreated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenCreated", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TokenCreated | null {
    return changetype<TokenCreated | null>(
      store.get("TokenCreated", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get parentAddress(): Bytes {
    let value = this.get("parentAddress");
    return value!.toBytes();
  }

  set parentAddress(value: Bytes) {
    this.set("parentAddress", Value.fromBytes(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value!.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get token_supply(): BigInt {
    let value = this.get("token_supply");
    return value!.toBigInt();
  }

  set token_supply(value: BigInt) {
    this.set("token_supply", Value.fromBigInt(value));
  }

  get token_tokenAddress(): Bytes {
    let value = this.get("token_tokenAddress");
    return value!.toBytes();
  }

  set token_tokenAddress(value: Bytes) {
    this.set("token_tokenAddress", Value.fromBytes(value));
  }

  get token_name(): string {
    let value = this.get("token_name");
    return value!.toString();
  }

  set token_name(value: string) {
    this.set("token_name", Value.fromString(value));
  }

  get token_symbol(): string {
    let value = this.get("token_symbol");
    return value!.toString();
  }

  set token_symbol(value: string) {
    this.set("token_symbol", Value.fromString(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
